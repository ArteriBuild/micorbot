{/* Copyright (c) 2016 - 2023 Australian Government **************************
'*  Name:        showchanges.min.js 
'*  Description: Global javascript snippets.
'*  Email:       wilson.wampers@gmail.com
'*****************************************************************************
'*  Modification History:
'*  -When           -Who            -Bug#           -What
'*  --------------------------------------------------------------------------
'*	-09-Sep-2021    -Wilson Wampers -               -Initial Version
'*****************************************************************************
LM: ww.231008.1640_P16 */}

var sc = sc || {}, ro;

sc.verbose      = false;
sc.debug        = false;
sc.scriptLoaded = true;
sc.debugCntr    = 0;
sc.switch = '', sc.pos = 0,
sc.inEditMode = false, sc.ctype, sc.commodity, sc.tcTop = 70,
sc.oPage = null, sc.pagePath, sc.pageName, sc.pageItemId, sc.versionNumber, sc.versionDate, 
sc.versionDateHtml, sc.shouldProcess = false; sc.nContent = '', sc.eContent, sc.cContent = '',
sc.structured = '', // structured commodities have a value 
sc.versionsToCompareUrl, sc.todayFolder, sc.tcItemTitle, sc.track = new Array();
sc.urlLaunch = false, sc.switchTop, sc.switchRight;
sc.showPanel = true;
sc.scMessage = 'Changes were made to this page on #### but there are too many to show';
sc.changedDate = ' - not set - ';
sc.isChanged = false;
sc.tcPageLayout = 36;
{// Constructor
    sc._CO = function(poObj) 
    {
        this.CHOBJ = poObj;
    }
}

//****************************************************************************
// Desc: Debugging info
//****************************************************************************
sc.getCounter = function()
{
    return ('-=['+(ut.pad((sc.debugCntr++),4))+']=- ');
}

//****************************************************************************
// Desc: Object resize observer [console.log('Element:', entry.target);]
//****************************************************************************
if(sw.IEVersion == -1)
{
    sc.ro = new ResizeObserver(function(entries) 
    {
        for(var entry in entries) 
        {
            var cr = entry.contentRect;

            sc.positionDivSwith(sc.tcTop);
            sc.positionTCNavigationPane( $(window).width() );
        }
    });
}
else // IE10/11
{
    $(window).on('resize', function(e)
    {
        sc.positionDivSwith(sc.tcTop);
        sc.positionTCNavigationPane( $(window).width() );
    });
}

//****************************************************************************
// Desc:
//****************************************************************************
sc.filterOutUnwantedChars = function(psString)
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.filterOutUnwantedChars');

    var string = '';
    string = (psString)? psString.replace(/^.[NoSC0-9\|]*$/g, '') : string;
    
    return string;
}

//****************************************************************************
// Desc:
//****************************************************************************
sc.init = function(psSwitch)
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.init');
    if(sc.verbose) console.log('::sc.init: '+ psSwitch);

    sc.switch = psSwitch;
    sc.pagePath = _spPageContextInfo.serverRequestPath;
    nLastFS = sc.pagePath.lastIndexOf('/');
    sc.pageName = sc.pagePath.substr(nLastFS+1);
    if(sc.pageName.toLocaleLowerCase() != 'website-feedback.aspx')
    {
        if(sc.verbose) console.log('Current page display version: ' + sc.pageName);
        
        sc.checkForCompatiblePageLayout();
    }
    else
    {
        if(sc.verbose) console.log('**> Skipped - Website-Feedback.aspx interference!');
        return;
    }
}

//****************************************************************************
// Desc:
//****************************************************************************
sc.checkForCompatiblePageLayout = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.checkForCompatiblePageLayout');

    var sVersionNumber, vDate = '', fDate, sHref, sPageLayoutTest = 'TC: ** Classic TC commodity template detected.'; 
    sc.versionDateHtml = '';

    if($('#main[tc="enabled"]').length) 
    { 
        if(sc.verbose) console.log('This page-layout is \'Track Changes\' enabled');
        sc.shouldProcess = true; 
    }
    else 
    {
        if(sc.verbose) console.log('This page-layout is NOT \'Track Changes\' enabled!');

        return;
    }

    sc.structured = '';
    if( $('#main').attr('template').indexOf('MicorMeatStructured') != -1 ) 
    { 
        sc.structured = 'meat';
        sPageLayoutTest = 'TC: ** Structured Meat template detected.';
    }
    if( $('#main').attr('template').indexOf('Micor2020DairyStandardPage') != -1 ) 
    { 
        sPageLayoutTest = 'TC: ** Classic TC Dairy template detected.';
    }
    if( $('#main').attr('template').indexOf('MicorDairyStructured') != -1 ) 
    { 
        sc.structured = 'dairy';
        sPageLayoutTest = 'TC: ** Structured Dairy template detected.';
    }
    if( $('#main').attr('template').indexOf('Micor2020FishStandardPage') != -1 ) 
    { 
        sc.structured = '';
        sPageLayoutTest = 'TC: ** Classic TC Fish template detected.';
    }
    if( $('#main').attr('template').indexOf('MicorFishStructured') != -1 
    ||  $('#main').attr('template').indexOf('MicorFishV2Structured')!= -1 ) 
    { 
        sc.structured = 'fish';
        sPageLayoutTest = 'TC: ** Structured Fish template detected.';
    }
    if( $('#main').attr('template').indexOf('Micor2020EggStandardPage') != -1 ) 
    { 
        sPageLayoutTest = 'TC: ** Classic TC Eggs template detected.';
    }
    if( $('#main').attr('template').indexOf('MicorEggsStructured') != -1 ) 
    { 
        sc.structured = 'eggs';
        sPageLayoutTest = 'TC: ** Structured Eggs template detected.';
    }
    if( $('#main').attr('template').indexOf('MicorNPGStructured') != -1 ) 
    { 
        sc.structured = 'npg';
        sPageLayoutTest = 'TC: ** Structured NPG template detected.';
        $('div[id*="_PRE_Sections__ControlWrapper_RichHtmlField"]').css({'margin-bottom':'-22px', 'display':''});
    }
    if( $('#main').attr('template').indexOf('MicorOrganicsStructured') != -1 ) 
    { 
        sc.structured = 'organics';
        sPageLayoutTest = 'TC: ** Structured Organics template detected.';
    }

    if(sc.verbose) console.log(sPageLayoutTest);

    if(sc.shouldProcess) 
    {
        sc.pageItemId = _spPageContextInfo.pageItemId;
        sc.nContent = $('div.PageContent > div[id*="__ControlWrapper_RichHtmlField"]').html();
        $('div[id*=_MicorBreadCrumbs]').next('h1').css(
            {
                width: '50%',
                'flex-wrap': 'wrap',
                '-ms-flex-wrap': 'wrap'
            }
        );
        sc.noShowChanges = false;
        if(sc.verbose) console.log(' ** -> div.VersionNumber: ' + $('div.VersionNumber').text().trim());
        sc.tmpVersionNumber = ''; 
        sc.tmpVersionNumber = sc.filterOutUnwantedChars($('div.VersionNumber').text());
        sc.versionFieldData = sc.tmpVersionNumber.split('|');
        sVersionNumber = sc.versionFieldData[0];
        sc.changedDate = (sc.versionFieldData.length == 6)? sc.versionFieldData[4]:'';
        sc.tcFolder = (sc.versionFieldData[2] != null)? sc.versionFieldData[2]: ut.getFolderFormattedDate();
        sc.pageVersion = sc.versionFieldData[3];
        // alert($('div.VersionNumber').text() + ' ' + sc.versionFieldData.length);
        if(sVersionNumber != '')
        {
            if(sc.versionFieldData.length == 4)
            {
                sc.versionNumber = sVersionNumber;
                sc.versionDate = sc.versionFieldData[1].replace(/\s/g, '');
            }
            else
            {
                sc.noShowChanges = true;
            }
        }
        else
        {
            sc.noShowChanges = true;
        }
        if(sc.noShowChanges)
        {
            if(!sc.inEditMode)
                if(sc.verbose) console.log(' [There are currently no \'Show Changes\' available for this page.]');
        }

        sc.modPageStatus();
    }
    else
    {
        if(sc.verbose) console.log(' -> Not a country content type page!\n Skipping version compare processing!');
    }
}

//****************************************************************************
// Desc: Assuming here when there's no ribbon visible we're looking at a 
//       published version of the page ... 
//****************************************************************************
sc.modPageStatus = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.modPageStatus');

    if(!sc.inEditMode)
    {
        if(sc.verbose) console.log('| --> TC key? : ' +  (ut.getUrlSearchKey('TC')));
        if(sc.switch != 'Yes')
        {
            if(sc.verbose) console.log('| --> track changes enabled for public viewing!');
            sc.enableTCGadgets();
        }
    }
}

//****************************************************************************
// Desc: position div element on peripheral params         
//****************************************************************************
sc.checkH2TcSpacer = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.checkH2TcSpacer');

    if($('body').width() <= 840)
    {
        if($('.h2TcSpacer').length == 0)
        {
            $('div[id*="_MicorBreadCrumbs"]').append('<div class="h2TcSpacer">&nbsp;</div>');
        }
    }
    else
    {
        $('.h2TcSpacer').remove();
    }
}

//****************************************************************************
// Desc: position div element on peripheral params
//****************************************************************************
sc.positionDivSwith = function(pnTop)
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.positionDivSwith');

    var nLeft, nWidth;

    nWidth = $('#main').width();
    if($('div#divSwitch').length)
    {
        sc.checkH2TcSpacer();
        nLeft = Math.round((nWidth - $('#collapsefaq').eq(0).width())/2) 
              + ($('#collapsefaq').eq(0).width() - $('div#divSwitch').width());

        $('div#divSwitch').css(
        {
            display: 'block',
            top: pnTop + 'px', 
            left: nLeft + 'px',
            width: $('div#page-content').width() + 'px'
        });
    }
}

//****************************************************************************
// Desc: position div element on peripheral params
//****************************************************************************
sc.positionTCNavigationPane = function(pnWidth)
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.positionTCNavigationPane');

    var nCurPos, sNewPos;
    // Hide the TC Navigation Panel on screen heights smaller than 801 pixels
    if($(window).height() <= 800) 
    {
        $('div.tcNavigationPane').css({'visibility':'hidden'});
        if(!sc.isChanged)
        {
            sc.scMessage = 'Since ####'.replace(/####/g, sc.versionDate);
        }
        else
        {
            sc.scMessage = sc.scMessage.replace(/####/g, sc.changedDate);
        }
        if($('input#tcSwitch').prop('checked'))
        {
            $('div.spanComment').text(sc.scMessage);
        }
    }
    else
    {
        if($('input#tcSwitch').prop('checked'))
        {
            $('div.tcNavigationPane').css({'visibility':'visible'});
            $('div.spanComment').text('');
        }
        nCurPos = parseInt($('div.tcNavigationPane').css('top'), 10);
        
        if( nCurPos > 0)
        {
            if($('input#tcSwitchnp').prop('checked'))
            {
                if(pnWidth <= 740)
                {
                    sNewPos = ($(window).height()-180)+'px';
                    $('div.tcNavigationPane').css('top', sNewPos);
                }
                else
                {
                    sNewPos = ($(window).height()-90)+'px';
                    $('div.tcNavigationPane').css('top', sNewPos);
                }
            }
        }
    }
}

//****************************************************************************
// Desc: title="ON : track the editor\'s changes\nOFF: see the current version
//****************************************************************************
sc.enableTCGadgets = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.enableTCGadgets');

    var sHtml;

    if($('div#divSwitch').length == 0)
    {
        sc.sTitle_disabled = 'There are no changes to show for this page',
        sc.sTitle_inactive = 'Turn on toggle to show changes',
        sc.sTitle_active   = 'Turn off toggle to hide changes'
        sComment1 = 'You can now see changes made to the content of the page by turning show changes on or off.';
        sComment2 = 'Use your keyboard, mouse or arrows to navigate through the latest changes of this page.';
        
        sHtml =  '';
        sHtml += '\n<div id="divSwitch" style="display: block;">'
        +'\n    <table class="tblSwitch" style="border-color: transparent;">'
        +'\n        <tbody>'
        +'\n            <tr>'
        +'\n                <td>'
        +'\n                    <span class="tcSpanTitle">Show/hide changes</span><label tabindex="0" id="lblSwitch"'
        +'\n                       class="switch"  title="There are no changes to show for this page"><input'
        +'\n                          id="tcSwitch" type="checkbox"/><span class="slider_sw round disabled">Slider</span></label>'
        +'\n                </td>'
        +'\n            </tr>'
        +'\n            <tr>'
        +'\n                <td>'
        +'\n                    <div class="spanComment"></div>'
        +'\n                </td>'
        +'\n            </tr>'
        +'\n        </tbody>'
        +'\n    </table>'
        +'\n</div>';
        
        $(sHtml).insertBefore($('h1.page-title'));
        sHtml = '';
        var sWidth = $('div#collapsefaq').eq(0).width() + 'px';
        $('div#divSwitch').css('width', sWidth);
        if(!sc.noShowChanges)
        {
            $('label#lblSwitch').prop('title', sc.sTitle_inactive);
            $('span.slider_sw').removeClass('disabled');
        }
        if(sc.changedDate == '')
        {
            $('div.spanComment').html('');
        }
        else
        {
            $('div.spanComment').html(sc.scMessage.replace(/####/g, sc.changedDate));
        }

        $('div.page-content').wrap('<div id="tcWrap"></div>');
        if(global.IEVersion == -1) sc.ro.observe(document.getElementById('s4-workspace'));

        // Html for the navigation pane
        sHtml += '<div id="tcNavigationPane" class="tcNavigationPane">';
        sHtml += ' <div class="npClose" title="Click to close." tabindex="0">';
        sHtml += '  <div>';
        sHtml += '<svg width="19" height="19" viewBox="0 0 19 19" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M18.5418 2.27956L16.7206 0.458313L9.50016 7.67873L2.27975 0.458313L0.458496 2.27956L7.67891 9.49998L0.458496 16.7204L2.27975 18.5416L9.50016 11.3212L16.7206 18.5416L18.5418 16.7204L11.3214 9.49998L18.5418 2.27956Z" fill="black"/></svg>';
        sHtml += '  </div>';
        sHtml += ' </div>';
        sHtml += ' <div class="tcWrapper">';
        sHtml += ' <div class="npHeader">';
        sHtml += '  <span class="npTitle">Show changes</span>';
        sHtml += '  <span class="npDate">Since '+ sc.versionDate +'</span><br/>';
        sHtml += '  <span class="npComment1">'+ sComment1 + '</span>'; 
        sHtml += '  <span class="npComment2">'+ sComment2 + '</span>';
        sHtml += ' </div>';
        sHtml += ' <div class="npNav">';
        sHtml += '   <div class="npSlider">';
        sHtml += '     <span class="npSpanTitle">Show/hide changes</span>';
        sHtml += '     <label tabindex="0" id="lblSwitchnp" class="npSwitch" title="'+sc.sTitle_active+'"><input id="tcSwitchnp" type="checkbox" checked="true" />';
        sHtml += '     <span class="slider_np round">Slider</span></label>';
        sHtml += '   </div>';
        sHtml += '   <div class="npButtons">';
        sHtml += '     <table id="tButtons">';
        sHtml += '       <tr>';
        sHtml += '         <td class="tdArw"><div tabindex="0" class="tddL"><span class="wd">';
        sHtml += '<svg width="23" height="25" viewBox="0 0 23 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M13.221 23.3255L12.0814 24.5964C11.5988 25.1345 10.8185 25.1345 10.3411 24.5964L0.361902 13.4732C-0.120634 12.9351 -0.120634 12.0649 0.361902 11.5325L10.3411 0.403595C10.8237 -0.134532 11.604 -0.134532 12.0814 0.403595L13.221 1.67449C13.7086 2.21834 13.6984 3.10568 13.2004 3.63808L7.01473 10.2101H21.768C22.4507 10.2101 23 10.8226 23 11.584V13.416C23 14.1774 22.4507 14.7899 21.768 14.7899H7.01473L13.2004 21.3619C13.7035 21.8943 13.7138 22.7817 13.221 23.3255Z" fill="black"/></svg>';
        sHtml += '</span></div></td>';
        sHtml += '         <td class="tdArw"><div tabindex="0" class="tddR"><span class="wd">';
        sHtml += '<svg width="23" height="25" viewBox="0 0 23 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M9.77904 1.67449L10.9186 0.403595C11.4012 -0.134532 12.1815 -0.134532 12.6589 0.403595L22.6381 11.5268C23.1206 12.0649 23.1206 12.9351 22.6381 13.4675L12.6589 24.5964C12.1763 25.1345 11.396 25.1345 10.9186 24.5964L9.77904 23.3255C9.29137 22.7817 9.30164 21.8943 9.79958 21.3619L15.9853 14.7899H1.23201C0.549269 14.7899 0 14.1774 0 13.416V11.584C0 10.8226 0.549269 10.2101 1.23201 10.2101H15.9853L9.79958 3.63808C9.29651 3.10568 9.28624 2.21834 9.77904 1.67449Z" fill="black"/></svg>';
        sHtml += '</span></div></td>';
        sHtml += '       </tr>';
        sHtml += '       <tr>';
        sHtml += '         <td><div class="small">Previous</div></td>';
        sHtml += '         <td><div class="small">Next</div></td>';
        sHtml += '       </tr>';
        sHtml += '     </table>';
        sHtml += '   </div>';
        sHtml += ' </div>';
        sHtml += '</div>';
        sHtml += '</div>';
        $('form').append(sHtml);

        if(sc.noShowChanges)
        {
            $('input#tcSwitch').on('mousedown click', 
            function(e)
            {
                e.preventDefault();
                return false;
            });
        }
        else 
        {
            sc.enableTcSwitchChange();
        }
        $('body').keydown( function(e) 
        {
            if($('input#tcSwitch').prop('checked') 
            && typeof( sc.cContent ) !== 'undefined' 
            && !sc.noShowChanges )
            {
                if(e.keyCode == 37) // left arrow
                { 
                    $('.tddL').addClass('active');
                    $('div.tddL').click();
                }
                else if(e.keyCode == 39) // right arrow
                { 
                    $('.tddR').addClass('active');
                    $('div.tddR').click();
                }
            }
        });
        $('label#lblSwitch').on('keydown', 
        function(e)
        {
            if(!sc.noShowChanges)
                if (e.which == 13 || e.which == 32) 
                {
                    e.preventDefault();
                    setTimeout( function()
                    {
                        sc.urlLaunch = true;
                        $('input#tcSwitch').click().change();
                    }, 500);
                } 
        });
        $('label#lblSwitchnp').on('keydown', 
        function(e)
        {
            if (e.which == 13 || e.which == 32) 
            {
                e.preventDefault();
                $('input#tcSwitch').click().change();
            } 
        });
        $('div.npClose div').on('click', function() { sc.paneClose(); });
        $('div.npClose').on('keydown', 
        function(e) 
        {
            if (e.which == 13 || e.which == 32) 
            {
                e.preventDefault();
                sc.paneClose();
            } 
        });
        $('input#tcSwitchnp').on('change', 
        function()
        {
            try // plants may cause issues otherwise
            {
                if(sc.verbose) console.log(' -> pane checkbox \'tcSwitchnp\' change event');
                $('input#tcSwitch').click().change();
            } catch(e) {;}
        });
        $('div.tddL').on('click', function() { sc.trackUp(); });
        $('div.tddL').on('keydown',
        function(e)
        {
            if (e.which == 13 || e.which == 32) 
            {
                e.preventDefault();
                sc.trackUp();
            }
        });
        $('div.tddR').on('click', function() { sc.trackDown(); });
        $('div.tddR').on('keydown', 
        function(e) 
        { 
            if (e.which == 13 || e.which == 32) 
            {
                e.preventDefault();
                sc.trackDown();
            }
        });
        // Enable show changes when the TC key is present in the URL
        if(ut.getUrlSearchKey('TC') == 'on')
        {
            setTimeout( function()
            {
                sc.urlLaunch = true;
                if(sc.verbose) console.log(' -> url launch triggered change event');
                if(!sc.noShowChanges) $('input#tcSwitch').click().change();
            }, 1000);
        }

        setTimeout( function() {sc.positionDivSwith( sc.tcTop );}, 10);
    }
}

//****************************************************************************
// Desc: Bugfix needed for Plants
//****************************************************************************
sc.enableTcSwitchChange = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.enableTcSwitchChange');

    $('input#tcSwitch').on('change', function()
    {
        setTimeout(
            function()
            {
                switch(sc.structured)
                {
                    case 'meat':
                        sm.toggleChanges();
                        break;
                    case 'dairy':
                        sd.toggleChanges();
                        break;
                    case 'fish':
                        sf.toggleChanges();
                        break;
                    case 'eggs':
                        se.toggleChanges();
                        break;
                    case 'npg':
                        sn.toggleChanges();
                        break;
                    case 'organics':
                        so.toggleChanges();
                        break;
                    default:
                        sc.toggleChanges();
                }
            }, 100);
        if(sc.verbose) console.log('||| <o> tcSwitch checkbox change event!');
        if($('input#tcSwitch').prop('checked'))
        {
            $('input#tcSwitch').prop('checked', true);
            $('label#lblSwitch').prop('title', sc.sTitle_active );
            sc.paneDown();
        }
        else 
        {
            $('input#tcSwitch').prop('checked', false);
            $('label#lblSwitch').prop('title', sc.sTitle_inactive );
            sc.paneUp();
        }
    });
}

//****************************************************************************
// Desc:
//****************************************************************************
sc.paneDown = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.paneDown');

    var sPosTop = '-90px';
    if(sc.verbose) console.log('>:sc.paneDown');
    if($(window).height() <= 800) 
    {
        $('div.tcNavigationPane').css({'visibility':'hidden'});
        sc.scMessage = 'Since '+sc.versionDate;
        if($('input#tcSwitch').prop('checked'))
        {
            $('div.spanComment').text(sc.scMessage);
        }
    }
    else
    {
        if($(window).width() <= 740)
        {
            sPosTop = '-180px';
        }

        if($('input#tcSwitch').prop('checked'))
        {
            $('div.tcNavigationPane').css({'visibility':'visible', top: sPosTop});
            $('div.spanComment').text('');
        }

        $('div.tcNavigationPane').fadeIn(600,
        sc.slideDown(
            parseInt(sPosTop,10),
            document.getElementById('tcNavigationPane'), 
            ($(window).height() - $('div.tcNavigationPane').height())
        ));
    }

    setTimeout(
        function()
        {
            $('div.tddL').click();
        }, 1000);
}

//****************************************************************************
// Desc: 
// Note: Not using jquery-animate causing bug @ 90% zoom
//****************************************************************************
sc.slideDown = function( pnTop, poObj, pnBottom )
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.slideDown');

    var top = pnTop, slide, bottom = pnBottom;
    slide = setInterval(
    function()
    {
        top = top + 4;
        poObj.style.top = top + 'px';
        if (top >= bottom) 
        {
            clearInterval(slide); 
            if(sc.structured != '')
            {
                $('input#tcSwitch').prop('checked', true);
                sc.enableTcSwitchChange();
            }
        }
    }, 1);
}

//****************************************************************************
// Desc:
//****************************************************************************
sc.paneUp = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.paneUp');
    
    $('div.spanComment').text('');
    $('html, body').animate({scrollTop: 0}, 100);
    $('div.tcNavigationPane').fadeOut(600);
    setTimeout(
        function()
        {
            $('input#tcSwitchnp').prop('checked', true);
            if($(window).height() <= 800) 
            {
                $('div.spanComment').text('');
            }
        }, 750
    );
    sc.pos = 0;

    sc.forcePageScrollToTop();

    setTimeout( function() {sc.positionDivSwith( sc.tcTop );}, 100);
}

//****************************************************************************
// Desc:
//****************************************************************************
sc.paneClose = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.paneClose');

    $('div.tcNavigationPane').fadeOut(600, 
    function()
    {
        if($(window).height() <= 800)
        {
            sc.scMessage = 'Since '+sc.versionDate;
            if($('input#tcSwitch').prop('checked'))
            {
                $('div.spanComment').text(sc.scMessage);
            }
        }
        $('div.tcNavigationPane').css({'visibility':'hidden'});  
    });
}

//****************************************************************************
// Desc:
//****************************************************************************
sc.forcePageScrollToTop = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.forcePageScrollToTop');

    document.getElementById('s4-bodyContainer').scrollIntoView(true);
}

//****************************************************************************
// Desc:
//****************************************************************************
sc.trackUp = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.trackUp');

    setTimeout(
        function()
        {
            $('.tddL').removeClass('active');
        }, 75);
    sc.undoBox();
    sc.pos -= 1;
    if(sc.pos < 0 ) sc.pos = 0;
    sc.box();
}

//****************************************************************************
// Desc:
//****************************************************************************
sc.trackDown = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.trackDown');

    setTimeout(
        function()
        {
            $('.tddR').removeClass('active');
        }, 75);
    sc.undoBox();
    sc.pos += 1;
    if(sc.pos > sc.track.length-1 ) sc.pos = sc.track.length-1;
    sc.box();
}

//****************************************************************************
// Desc:
//****************************************************************************
sc.box = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.box');

    try 
    {
        var oElm = sc.track[sc.pos].CHOBJ;
        $(oElm).addClass('tcBox');
        sc.scrollIntoView();
    } catch(e) {;}
}

//****************************************************************************
// Desc:
//****************************************************************************
sc.undoBox = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.undoBox');

    try 
    {
        var oElm = sc.track[sc.pos].CHOBJ; 
        if($(oElm).hasClass('tcBox'))
        {
            $(oElm).removeClass('tcBox');
        }
        $(oElm).off('focus');
    }
    catch(err) { console.log('Error: ' + err); }
}

//****************************************************************************
// Desc:
//****************************************************************************
sc.scrollIntoView = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.scrollIntoView');

    var oElm = sc.track[sc.pos].CHOBJ;
    // Make sure the encapsulating expand/collapse parent is set to expanded
    var oParent = $(oElm).closest('h3 + div').prev();
    if(!oParent.hasClass('expanded'))
    { 
        $(oParent).toggleClass('expanded');
        $(oParent).next('div').slideToggle(1);
        lastActionedLink = $(oParent).find('a').attr('id');
        if(sc.verbose) console.log('lastActionedLink: ' + lastActionedLink);
    }
    $(oElm).on('focus', function()
    {
        var posTop = $(oElm).offset().top;
        $([document.documentElement, document.body]).animate(
        {}, 300);

        if(posTop > $(window).height()-100) 
        {
            document.getElementById('s4-workspace').scrollBy(0, Math.round($(window).height()/2));
        }
    });

    $(oElm).focus();
}

//****************************************************************************
// Desc:
//****************************************************************************
sc.getChanges = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.getChanges');

    ut.showWaitDialog(
        'Working on it&nbsp;&nbsp;&nbsp;',
        'Loading editor\'s changes<br/> This won\'t take long ...', 
        125, 360
    );
    setTimeout(sc.loadTrackChanges(), 100);
}

//****************************************************************************
// Desc: load the track change content data here
//****************************************************************************
sc.loadTrackChanges = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.loadTrackChanges');

    var itemTitle = parseInt(sc.pageItemId, 10) + '-' + parseInt(sc.versionNumber, 10) + '-' + parseInt(sc.pageVersion, 10), sClean='';
    
    if(sc.verbose) console.log('Item to load: ' + itemTitle);

    sc.tmpVersionNumber = '';
    sc.tmpVersionNumber = sc.filterOutUnwantedChars($('div.VersionNumber').text());
    var arVers = sc.tmpVersionNumber.split('|');
    var folder = arVers[2];
    $('body').append('<div id="outputContent"></div>');
    $.ajaxSetup(
    {
        'beforeSend' : function(xhr) 
        {
            xhr.overrideMimeType('text/html; charset=UTF-8');
        }
    });
    $('#outputContent').load(L_Menu_BaseUrl + '/siteassets/tc/'+folder+'/'+itemTitle+'.htm #collapsefaq',
    function()
    {
        sClean = $('#outputContent').html();
        sc.cContent = sClean.replace(/[\u200B-\u200D\uFEFF]/g, '')
                            .replace(/â€“/g, '-')
                            .replace(/â€˜/g, '\'')
                            .replace(/â€™/g, '\'')
                            .replace(/Â/,'');
        $('#outputContent').remove();
        
        sc.displayChanges();
    });
}

//****************************************************************************
// Desc:
//****************************************************************************
sc.toggleChanges = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.toggleChanges');

    if($('input#tcSwitch').prop('checked'))
    {
        if(!sc.urlLaunch)
        {
            if(sc.verbose) console.log('Loading edited version');       
            if(sc.cContent != '')
            {
                sc.displayChanges();
            }
            else
            {
                sc.getChanges();
            }
        }
        else
        {
            sc.urlLaunch = false;
        }
    }
    else
    {
        if(sc.verbose) console.log('Loading new version');

        sc.restorePageContent();
        sc.closeNavigationPane();
    }
}

//****************************************************************************
// Desc:
//****************************************************************************
sc.showNavigationPane = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.showNavigationPane');

    $('div.tcNavigationPane').css({'visibility':'visible'});
}

//****************************************************************************
// Desc:
//****************************************************************************
sc.parkNavigationPane = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.parkNavigationPane');

    $('div.tcNavigationPane').css({'visibility':'visible'});
}

//****************************************************************************
// Desc:
//****************************************************************************
sc.closeNavigationPane = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.closeNavigationPane');

    $('div.tcNavigationPane').css({'visibility':'hidden'});
}

//****************************************************************************
// Desc:
//****************************************************************************
sc.removeNavigationPane = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.removeNavigationPane');

    $('div.tcNavigationPane').css({'visibility':'hidden'});
}

//****************************************************************************
// Desc:
//****************************************************************************
sc.displayChanges = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.displayChanges');

    $('div.PageContent > div[id*="__ControlWrapper_RichHtmlField"]').html(sc.cContent);

    sc.genTrackArray();
    sc.setAccordion();

    $('div#commodity-bg').css({'z-index':'0'});
    $('div#main').css({'position':'relative','z-index':'1'});
    $('div.commodity-menu').css({'position':'relative','z-index':'1'});

    if(ut.waitDialog) setTimeout(ut.closeWaitDialog(), 750);
}

//****************************************************************************
// Desc:
//****************************************************************************
sc.genTrackArray = function()
{ 
    if(sc.debug) console.log(sc.getCounter() + 'sc.genTrackArray');

    sc.track = new Array();
    if(sc.cContent != '')
    {
        $('#main span[class*="ms-diff"]').each(function() 
        {
            if($(this).length != 0)
            {
                // console.log('-*-> diff tag: \n' + $(this).html());
                sc.track[sc.track.length] = new sc._CO($(this));
            }
        });
        if(sc.verbose) console.log('Total diff tags: ' + sc.track.length);   
    }
}

//****************************************************************************
// Desc:
//****************************************************************************
sc.restorePageContent = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.restorePageContent');

    $('div.PageContent > div[id*="__ControlWrapper_RichHtmlField"]').html(sc.nContent);
    sc.setAccordion();
    $('div#commodity-bg').css({'z-index':'0'});
    $('div#main').css({'position':'relative','z-index':'1'});
    $('div.commodity-menu').css({'position':'relative','z-index':'1'});
}

//****************************************************************************
// Desc: Swapping content in the page html needs to re-instantiate: 
//       - expand/collapse functionality
//       - reposition branding background etc...
//***************************************************************************
sc.setAccordion = function() 
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.setAccordion');

    global.initializeAccordion();
}

//****************************************************************************
// Desc: jQuery outerHTML
//****************************************************************************
sc.rehookLU = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sc.rehookLU');

    ut.removeHash();
}

//****************************************************************************
//////////////////////////////////////////////////////////////////////////////
//****************************************************************************
{/*S: MEAT */
var sm = sm || {};

sm.commodTag   = 'tcMeat';
sm.arV         = new Array();
sm.mrgdContent = '', // Content containing track changes merged with original content
sm.pageContent = '', // Original page published content 
sm.tcntContent = '', // Loaded content from the Track Changes file in Site Assets
sm.Fmap        = new Array();

// Constructors
sm._FM = function(psFieldType, psLabel, psMapLabel)
{
    this.TYPE = psFieldType; // A, H1, L, TL : all UpperCase
    this.WLBL = psLabel;     // wiki fieldLabel
    this.MAPT = psMapLabel;  // span.fieldValue / div[aria-labelledby*="_ x x x _label"]
}
// Fields mapping for meat
sm.Fmap[ 0] = new sm._FM( 'A',  'PRE_Sections', '_PRE_Sections_label');
sm.Fmap[ 1] = new sm._FM( 'A',  'PMA_PreconditionsMarketAccess', '_PMA_PreconditionsMarketAccess');
sm.Fmap[ 2] = new sm._FM( 'A',  'M_ImportPermit', '_M_ImportPermit');
sm.Fmap[ 3] = new sm._FM( 'A',  'M_EstablishmentListing', '_M_EstablishmentListing_label');
sm.Fmap[ 4] = new sm._FM( 'A',  'M_AccessEdibleProductsEdibleByproducts', '_M_AccessEdibleProductsEdibleByproducts_label');
sm.Fmap[ 5] = new sm._FM( 'A',  'M_AccessInedibleProductsInedibleByproducts', '_M_AccessInedibleProductsInedibleByproducts_label');
sm.Fmap[ 6] = new sm._FM( 'A',  'PMA_ProhibitedProducts', '_PMA_ProhibitedProducts_label');
sm.Fmap[ 7] = new sm._FM( 'A',  'M_AustralianAnimalProductsNotOfficialRequirements', '_M_AustralianAnimalProductsNotOfficialRequirements_label');
sm.Fmap[ 8] = new sm._FM( 'A',  'M_PremisesEquipment', '_M_PremisesEquipment_label');
sm.Fmap[ 9] = new sm._FM( 'A',  'OR_OperationalRequirements', '_OR_OperationalRequirements_label');
sm.Fmap[10] = new sm._FM( 'A',  'M_GeneralOperationalRequirements', '_M_GeneralOperationalRequirements_label');
sm.Fmap[11] = new sm._FM( 'A',  'M_ReligiousRequirements', '_M_ReligiousRequirements_label');
sm.Fmap[12] = new sm._FM( 'A',  'M_MicrobialResidueSamplingMaxAcceptableLimits', '_M_MicrobialResidueSamplingMaxAcceptableLimits_label');
sm.Fmap[13] = new sm._FM( 'A',  'M_SlaughterProcessing', '_M_SlaughterProcessing_label');
sm.Fmap[14] = new sm._FM( 'A',  'M_SourcingReceivalSlaughterLivestock', '_M_SourcingReceivalSlaughterLivestock_label');
sm.Fmap[15] = new sm._FM( 'A',  'M_AnteMortemInspectionSlaughterPostMortemInspection', '_M_AnteMortemInspectionSlaughterPostMortemInspection_label');
sm.Fmap[16] = new sm._FM( 'A',  'M_Boning', '_M_Boning_label');
sm.Fmap[17] = new sm._FM( 'A',  'M_WrappingPackaging', '_M_WrappingPackaging_label');
sm.Fmap[18] = new sm._FM( 'A',  'M_RefrigerationTransferLoadout', '_M_RefrigerationTransferLoadout_label');
sm.Fmap[19] = new sm._FM( 'A',  'PPHC_ProductionProductsHumanComsumption', '_PPHC_ProductionProductsHumanComsumption_label');
sm.Fmap[20] = new sm._FM( 'A',  'M_MeatEdibleOffal', '_M_MeatEdibleOffal_label');
sm.Fmap[21] = new sm._FM( 'A',  'M_MeatProducts', '_M_MeatProducts_label');
sm.Fmap[22] = new sm._FM( 'A',  'M_Casings', '_M_Casings_label');
sm.Fmap[23] = new sm._FM( 'A',  'M_RenderedEdibleAnimalFatsOilsIncludingTallow', '_M_RenderedEdibleAnimalFatsOilsIncludingTallow_label');
sm.Fmap[24] = new sm._FM( 'A',  'M_GelatineCollagen', '_M_GelatineCollagen_label');
sm.Fmap[25] = new sm._FM( 'A',  'M_CompositeProducts', '_M_CompositeProducts_label');
sm.Fmap[26] = new sm._FM( 'A',  'PPNHC_ProductionProductsNotHumanConsumption', '_PPNHC_ProductionProductsNotHumanConsumption_label');
sm.Fmap[27] = new sm._FM( 'A',  'M_GreenRunners', '_M_GreenRunners_label');
sm.Fmap[28] = new sm._FM( 'A',  'M_WoolSkinsHidesTrophies', '_M_WoolSkinsHidesTrophies_label');
sm.Fmap[29] = new sm._FM( 'A',  'M_RawPetmeatProcessedPetfood', '_M_RawPetmeatProcessedPetfood_label');
sm.Fmap[30] = new sm._FM( 'A',  'M_TechnicalProductsPharmaceuticalMaterial', '_M_TechnicalProductsPharmaceuticalMaterial_label');
sm.Fmap[31] = new sm._FM( 'A',  'M_RenderedProducts', '_M_RenderedProducts_label');
sm.Fmap[32] = new sm._FM( 'A',  'PPNHC_AnimalFeed', '_PPNHC_AnimalFeed_label');
sm.Fmap[33] = new sm._FM( 'A',  'PLSM_PackagingLabellingShippingMarks', '_PLSM_PackagingLabellingShippingMarks_label');
sm.Fmap[34] = new sm._FM( 'A',  'PLSM_Labelling', '_PLSM_Labelling_label');
sm.Fmap[35] = new sm._FM( 'A',  'PLSM_ShelfLife', '_PLSM_ShelfLife_label');
sm.Fmap[36] = new sm._FM( 'A',  'PLSM_ShippingMarks', '_PLSM_ShippingMarks_label');
sm.Fmap[37] = new sm._FM( 'A',  'M_DocumentationRequirementsEdibleProducts', '_M_DocumentationRequirementsEdibleProducts_label');
sm.Fmap[38] = new sm._FM( 'A',  'M_MeatMeatProductsEdibleOffal', '_M_MeatMeatProductsEdibleOffal_label');
sm.Fmap[39] = new sm._FM( 'A',  'M_GameMeatMeatProducts', '_M_GameMeatMeatProducts_label');
sm.Fmap[40] = new sm._FM( 'A',  'M_Casings_2', '_M_Casings_2_label');
sm.Fmap[41] = new sm._FM( 'A',  'M_RenderedEdibleAnimalFatsOilsIncludingTallow_2', '_M_RenderedEdibleAnimalFatsOilsIncludingTallow_2_label');
sm.Fmap[42] = new sm._FM( 'A',  'M_GelatineCollagen_2', '_M_GelatineCollagen_2_label');
sm.Fmap[43] = new sm._FM( 'A',  'M_ShipsStores', '_M_ShipsStores_label');
sm.Fmap[44] = new sm._FM( 'A',  'M_CarryOnPacksPersonalConsignmentsTradeSamples', '_M_CarryOnPacksPersonalConsignmentsTradeSamples_label');
sm.Fmap[45] = new sm._FM( 'A',  'M_CompositeProducts_2', '_M_CompositeProducts_2_label');
sm.Fmap[46] = new sm._FM( 'A',  'M_DocumentationRequirementsInedibleProducts', '_M_DocumentationRequirementsInedibleProducts_label');
sm.Fmap[47] = new sm._FM( 'A',  'M_GreenRunners_2', '_M_GreenRunners_2_label');
sm.Fmap[48] = new sm._FM( 'A',  'M_WoolSkinsHidesTrophies_2', '_M_WoolSkinsHidesTrophies_2_label');
sm.Fmap[49] = new sm._FM( 'A',  'M_RawPetmeatProcessedPetfood_2', '_M_RawPetmeatProcessedPetfood_2_label');
sm.Fmap[50] = new sm._FM( 'A',  'DR_TechnicalGradePharmaceuticalProducts', '_DR_TechnicalGradePharmaceuticalProducts_label');
sm.Fmap[51] = new sm._FM( 'A',  'M_RenderedProducts_2', '_M_RenderedProducts_2_label');
sm.Fmap[52] = new sm._FM( 'A',  'DR_AnimalFeed', '_DR_AnimalFeed_label');
sm.Fmap[53] = new sm._FM( 'A',  'SAFR_ShippingAirFreightRequirements', '_SAFR_ShippingAirFreightRequirements_label');
sm.Fmap[54] = new sm._FM( 'A',  'M_PortOfEntryInspectionTesting', '_M_PortOfEntryInspectionTesting_label');
sm.Fmap[55] = new sm._FM( 'A',  'DEF_Definitions', '_DEF_Definitions_label');

//****************************************************************************
// Desc: 
//****************************************************************************
sm.mergePageWithVersion = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sm.mergePageWithVersion');

    var nCnt = 0;
    // Only on the first page load
    if( sm.mrgdContent == '' || sm.pageConent == '' )
    {
        $('body').append('<div class="mergedContent"></div>');
        $('body').append('<div class="trackChangesContent"></div>');

        sm.pageContent = $('div.page-content').html();

        $('div.mergedContent').html('');
        $('div.mergedContent').html(sm.pageContent);
        $('div.trackChangesContent').html('');
        $('div.trackChangesContent').html(sm.tcntContent);
        // search for matches in the fieldmapping array then, if found, swap content
        $('div.trackChangesContent').find('div.tcDiv').each(
        function()
        {
            if(global.verbose) console.log(++nCnt);
            var sFieldType = sWikiLabel = sFieldLabl = sFieldHtml = '', bMatch = false;

            for(var ni=0; ni<sm.Fmap.length; ni++)
            {
                if( $(this).find('label.fieldLabel').text().replace(/\//g,'_') == sm.Fmap[ni].WLBL )
                {
                    if(global.verbose) console.log(' --> Match: ' + sm.Fmap[ni].WLBL);
                    sFieldType = sm.Fmap[ni].TYPE;
                    sWikiLabel = sm.Fmap[ni].WLBL;
                    sFieldLabl = sm.Fmap[ni].MAPT;
                        $(this).find('label').remove();
                        $(this).find('br'   ).remove();
                    sFieldHtml = $(this).html();
                    if(global.verbose) 
                        console.log(    '  >Type: \n'        + sFieldType
                                    + '\n  >Wiki Label: \n'  + sWikiLabel
                                    + '\n  >Field Label: \n' + sFieldLabl
                                    + '\n  >Field Html: \n'  + sFieldHtml
                                    );
                    bMatch = true;
                    if(bMatch)
                    {
                        switch(sFieldType)
                        {
                            case 'A':
                            {
                                $('div.mergedContent').find('div[aria-labelledby*="'+sFieldLabl+'"]').each(
                                function()
                                {
                                    $(this).html(sFieldHtml);
                                });
                                break;
                            }
                            case 'H1': // Special display: in a H1
                            {
                                $('div.mergedContent > h1').eq(0).html(sFieldHtml);
                                break;
                            }
                            case 'L':
                            {
                                $('div.mergedContent').find('span.fieldLabel').each(
                                function()
                                {
                                    if($(this).text() == sFieldLabl)
                                    {
                                        $(this).next().html(sFieldHtml); 
                                    }
                                });
                                break;
                            }
                            case 'TL': // Special display: in a table
                            {
                                $('div.mergedContent').find('span.fieldLabel').each(
                                function()
                                {
                                    if($(this).text().replace(/\//g,'_') == sFieldLabl)
                                    {
                                        $(this).parent().next().find('span.fieldValue').html(sFieldHtml);
                                    }
                                });
                            }
                        }
                        bMatch = false;
                    }
                    break; // exit the for loop
                }
            }
        });
        sm.mrgdContent = $('div.mergedContent').html();
        if($('div.trackChangesContent')) $('div.trackChangesContent').remove();
        if($('div.mergedContent')) $('div.mergedContent').remove();
        // plants need to be shown all expanded -> leave comment until plants comes on board
        // setTimeout( function() {$('span.excoll > a').click();}, 50);
    }
    $('div.page-content').html('');
    $('div.page-content').html(sm.mrgdContent);

    sm.checkEventsRegistration();

    return;
}

//****************************************************************************
// Desc: 
//****************************************************************************
sm.checkEventsRegistration = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sm.checkEventsRegistration');

    $('input#tcSwitch').off('change');
    $('input#tcSwitch').prop('checked', true);
    sc.positionDivSwith(sc.tcTop);
    sc.enableTcSwitchChange(); 
}

//****************************************************************************
// Desc: 
//****************************************************************************
sm.toggleChanges = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sm.toggleChanges');

    if($('input[type=checkbox]#tcSwitch').prop('checked'))
    {
        if(!sc.urlLaunch)
        {
            if(global.verbose) console.log('Loading editors track changes version');       
            if(sm.tcntContent != '')
            {
                sm.displayChanges();
            }
            else
            {
                sm.getChanges();
            }
        }
        else
        {
            sc.urlLaunch = false;
        }
    }
    else
    {
        if(global.verbose) console.log('Loading new version');

        sm.restorePageContent();
        sc.closeNavigationPane();
    }
}

//****************************************************************************
// Desc: 
//****************************************************************************
sm.displayChanges = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sm.displayChanges');

    sm.mergePageWithVersion();
    sm.genTrackArray();
    sc.setAccordion();
    sc.rehookLU();
    $('div#commodity-bg').css({'z-index':'0'});
    $('div#main').css({'position':'relative','z-index':'1'});
    $('div.commodity-menu').css({'position':'relative','z-index':'1'});

    if(ut.waitDialog) setTimeout(ut.closeWaitDialog(), 750);

    sc.showNavigationPane();
}

//****************************************************************************
// Desc:
//****************************************************************************
sm.genTrackArray = function()
{  
    if(sc.debug) console.log(sc.getCounter() + 'sm.genTrackArray');

    sc.track = new Array();
    if(sm.mrgdContent != '')
    {
        $('#main span[class*="ms-diff"]').each(function() 
        {
            if($(this).length != 0)
            {
                if(global.verbose) console.log('-*-> diff tag: \n' + $(this).html());
                sc.track[sc.track.length] = new sc._CO($(this));
            }
        });
        if(global.verbose) console.log('Total structured diff tags: ' + sc.track.length);   
    }
}


//****************************************************************************
// Desc: 
//****************************************************************************
sm.getChanges = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sm.getChanges');

    ut.showWaitDialog(
        'Working on it&nbsp;&nbsp;&nbsp;',
        'Loading editor\'s changes<br/> This won\'t take long ...', 
        125, 360
    );
    setTimeout(sm.loadTrackChanges(), 100);
}

//****************************************************************************
// Desc: 
//****************************************************************************
sm.loadTrackChanges = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sm.loadTrackChanges');

    var itemTitle = parseInt(sc.pageItemId, 10) + '-' + parseInt(sc.versionNumber, 10) 
                + '-' + parseInt(sc.pageVersion, 10), sClean='';

    sm.tmpVersionNumber = ''; ;
    sm.tmpVersionNumber = sc.filterOutUnwantedChars($('div.VersionNumber').text());
    var arVers = sm.tmpVersionNumber.split('|');
    var folder = arVers[2];
    var sVersUrl = L_Menu_BaseUrl + '/siteassets/tc/'+folder+'/'+itemTitle+'.htm';
    if(global.verbose) console.log('Item URL to load: ' + sVersUrl);
    $('body').append('<div id="versionContent"></div>');
    $.ajaxSetup(
    {
        'beforeSend' : function(xhr) 
        {// xhr.overrideMimeType('text/html; charset=ISO-8859-1');
            xhr.overrideMimeType('text/html; charset=UTF-8');
        }
    });
    $('#versionContent').load(sVersUrl + (' #' + sm.commodTag),
    function()
    {
        sClean = $('#versionContent').html();
        sm.tcntContent = sClean.replace(/[\u200B-\u200D\uFEFF]/g, '')
                            .replace(/Â/g, '')
                            .replace(/â€‹/g, '')
                            .replace(/Ã«/,'ë')
                            .replace(/â¬9/g, '');
        $('#versionContent').remove();
        setTimeout(function()
        {
            sm.displayChanges();
        }, 200);
    });
}

//****************************************************************************
// Desc: should occur when track changes are turned of again
//****************************************************************************
sm.restorePageContent = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'sm.restorePageContent');

    $('div.page-content').html('');
    $('div.page-content').html(sm.pageContent);
    sc.setAccordion();
    $('div#commodity-bg').css({'z-index':'0'});
    $('div#main').css({'position':'relative','z-index':'1'});
    $('div.commodity-menu').css({'position':'relative','z-index':'1'});
    $('input[type=checkbox]#tcSwitch').prop('checked', false);

    sc.enableTcSwitchChange();
}

//****************************************************************************
/*E: MEAT */
}
//****************************************************************************
//////////////////////////////////////////////////////////////////////////////
//****************************************************************************
{/*S: DAIRY */
    var sd = sd || {};

    sd.commodTag   = 'tcDairy';
    sd.arV         = new Array();
    sd.mrgdContent = '', // Content containing track changes merged with original content
    sd.pageContent = '', // Original page published content 
    sd.tcntContent = '', // Loaded content from the Track Changes file in Site Assets
    sd.Fmap        = new Array();

    // Constructors
    sd._FM = function(psFieldType, psLabel, psMapLabel)
    {
        this.TYPE = psFieldType; // A, H1, L, TL : all UpperCase
        this.WLBL = psLabel;     // wiki fieldLabel
        this.MAPT = psMapLabel;  // span.fieldValue / div[aria-labelledby*="_ x x x _label"]
    }
    // Fields mapping for dairy
    sd.Fmap[ 0] = new sd._FM( 'A',  'PRE_Sections', '_PRE_Sections_label');
    sd.Fmap[ 1] = new sd._FM( 'A',  'PMA_PreconditionsMarketAccess', '_PMA_PreconditionsMarketAccess_label');
    sd.Fmap[ 2] = new sd._FM( 'A',  'PMA_EstablishmentRegistration', '_PMA_EstablishmentRegistration_label');
    sd.Fmap[ 3] = new sd._FM( 'A',  'PMA_OverseasListing', '_PMA_OverseasListing_label');
    sd.Fmap[ 4] = new sd._FM( 'A',  'PMA_ProhibitedProducts', '_PMA_ProhibitedProducts_label');
    sd.Fmap[ 5] = new sd._FM( 'A',  'PMA_GeneralInformation', '_PMA_GeneralInformation_label');
    sd.Fmap[ 6] = new sd._FM( 'A',  'PPHC_ProductionProductsHumanComsumption', '_PPHC_ProductionProductsHumanComsumption_label');
    sd.Fmap[ 7] = new sd._FM( 'A',  'PPHC_MilkMilkProducts', '_PPHC_MilkMilkProducts_label');
    sd.Fmap[ 8] = new sd._FM( 'A',  'PPHC_CompositionalRequirements', '_PPHC_CompositionalRequirements_label');
    sd.Fmap[ 9] = new sd._FM( 'A',  'PPHC_FurtherInformation', '_PPHC_FurtherInformation_label');
    sd.Fmap[10] = new sd._FM( 'A',  'PPNHC_ProductionProductsNotHumanConsumption', '_PPNHC_ProductionProductsNotHumanConsumption_label');
    sd.Fmap[11] = new sd._FM( 'A',  'PPNHC_TechnicalGradePharmaceuticalProducts', '_PPNHC_TechnicalGradePharmaceuticalProducts_label');
    sd.Fmap[12] = new sd._FM( 'A',  'PPNHC_AnimalFeed', '_PPNHC_AnimalFeed_label');
    sd.Fmap[13] = new sd._FM( 'A',  'PPNHC_ManufacturingGradeProducts', '_PPNHC_ManufacturingGradeProducts_label');
    sd.Fmap[14] = new sd._FM( 'A',  'PPNHC_Processing', '_PPNHC_Processing_label');
    sd.Fmap[15] = new sd._FM( 'A',  'PPNHC_FurtherInformation', '_PPNHC_FurtherInformation_label');
    sd.Fmap[16] = new sd._FM( 'A',  'OR_OperationalRequirements', '_OR_OperationalRequirements_label');
    sd.Fmap[17] = new sd._FM( 'A',  'OR_MicrobialResidueSampling', '_OR_MicrobialResidueSampling_label');
    sd.Fmap[18] = new sd._FM( 'A',  'OR_OperationalRequirementsAdditional', '_OR_OperationalRequirementsAdditional_label');
    sd.Fmap[19] = new sd._FM( 'A',  'OR_Hygiene', '_OR_Hygiene_label');
    sd.Fmap[20] = new sd._FM( 'A',  'DR_DocumentationRequirements', '_DR_DocumentationRequirements_label');
    sd.Fmap[21] = new sd._FM( 'A',  'DR_MilkMilkProducts', '_DR_MilkMilkProducts_label');
    sd.Fmap[22] = new sd._FM( 'A',  'DR_ManufacturingGradeProducts', '_DR_ManufacturingGradeProducts_label');
    sd.Fmap[23] = new sd._FM( 'A',  'DR_TechnicalGradePharmaceuticalProducts', '_DR_TechnicalGradePharmaceuticalProducts_label');
    sd.Fmap[24] = new sd._FM( 'A',  'DR_AnimalFeed', '_DR_AnimalFeed_label');
    sd.Fmap[25] = new sd._FM( 'A',  'DR_Consignments10KgTradeSamples', '_DR_Consignments10KgTradeSamples_label');
    sd.Fmap[26] = new sd._FM( 'A',  'DR_AdditionalCertificationLetter', '_DR_AdditionalCertificationLetter_label');
    sd.Fmap[27] = new sd._FM( 'A',  'IP_ImportProcedures', '_IP_ImportProcedures_label');
    sd.Fmap[28] = new sd._FM( 'A',  'IP_ImportPermit', '_IP_ImportPermit_label');
    sd.Fmap[29] = new sd._FM( 'A',  'IP_PortEntryInspectionTesting', '_IP_PortEntryInspectionTesting_label');
    sd.Fmap[30] = new sd._FM( 'A',  'PLSM_PackagingLabellingShippingMarks', '_PLSM_PackagingLabellingShippingMarks_label');
    sd.Fmap[31] = new sd._FM( 'A',  'PLSM_Packaging', '_PLSM_Packaging_label');
    sd.Fmap[32] = new sd._FM( 'A',  'PLSM_Labelling', '_PLSM_Labelling_label');
    sd.Fmap[33] = new sd._FM( 'A',  'PLSM_ShelfLife', '_PLSM_ShelfLife_label');
    sd.Fmap[34] = new sd._FM( 'A',  'PLSM_ShippingMarks', '_PLSM_ShippingMarks_label');
    sd.Fmap[35] = new sd._FM( 'A',  'PLSM_FurtherInformation', '_PLSM_FurtherInformation_label');
    sd.Fmap[36] = new sd._FM( 'A',  'SAFR_ShippingAirFreightRequirements', '_SAFR_ShippingAirFreightRequirements_label');
    sd.Fmap[37] = new sd._FM( 'A',  'SAFR_RefrigerationTransferLoadout', '_SAFR_RefrigerationTransferLoadout_label');
    sd.Fmap[38] = new sd._FM( 'A',  'ADA_AdditionalDocumentationAvailable', '_ADA_AdditionalDocumentationAvailable_label');
    sd.Fmap[39] = new sd._FM( 'A',  'DEF_Definitions', '_DEF_Definitions_label');

    //****************************************************************************
    // Desc: 
    //****************************************************************************
    sd.mergePageWithVersion = function()
    {
        if(sc.debug) console.log(sc.getCounter() + 'sd.mergePageWithVersion');

        var nCnt = 0;
        // Only on the first page load
        if( sd.mrgdContent == '' || sd.pageConent == '' )
        {
            $('body').append('<div class="mergedContent"></div>');
            $('body').append('<div class="trackChangesContent"></div>');

            sd.pageContent = $('div.page-content').html();

            $('div.mergedContent').html('');
            $('div.mergedContent').html(sd.pageContent);
            $('div.trackChangesContent').html('');
            $('div.trackChangesContent').html(sd.tcntContent);
            // search for matches in the fieldmapping array then, if found, swap content
            $('div.trackChangesContent').find('div.tcDiv').each(
            function()
            {
                if(global.verbose) console.log(++nCnt);
                var sFieldType = sWikiLabel = sFieldLabl = sFieldHtml = '', bMatch = false;

                for(var ni=0; ni<sd.Fmap.length; ni++)
                {
                    if( $(this).find('label.fieldLabel').text().replace(/\//g,'_') == sd.Fmap[ni].WLBL )
                    {
                        if(global.verbose) console.log(' --> Match: ' + sd.Fmap[ni].WLBL);
                        sFieldType = sd.Fmap[ni].TYPE;
                        sWikiLabel = sd.Fmap[ni].WLBL;
                        sFieldLabl = sd.Fmap[ni].MAPT;
                            $(this).find('label').remove();
                            $(this).find('br'   ).remove();
                        sFieldHtml = $(this).html();
                        if(global.verbose) 
                            console.log(    '  >Type: \n'        + sFieldType
                                        + '\n  >Wiki Label: \n'  + sWikiLabel
                                        + '\n  >Field Label: \n' + sFieldLabl
                                        + '\n  >Field Html: \n'  + sFieldHtml
                                        );
                        bMatch = true;
                        if(bMatch)
                        {
                            switch(sFieldType)
                            {
                                case 'A':
                                {
                                    $('div.mergedContent').find('div[aria-labelledby*="'+sFieldLabl+'"]').each(
                                    function()
                                    {
                                        $(this).html(sFieldHtml);
                                    });
                                    break;
                                }
                                case 'H1': // Special display: in a H1
                                {
                                    $('div.mergedContent > h1').eq(0).html(sFieldHtml);
                                    break;
                                }
                                case 'L':
                                {
                                    $('div.mergedContent').find('span.fieldLabel').each(
                                    function()
                                    {
                                        if($(this).text() == sFieldLabl)
                                        {
                                            $(this).next().html(sFieldHtml); 
                                        }
                                    });
                                    break;
                                }
                                case 'TL': // Special display: in a table
                                {
                                    $('div.mergedContent').find('span.fieldLabel').each(
                                    function()
                                    {
                                        if($(this).text().replace(/\//g,'_') == sFieldLabl)
                                        {
                                            $(this).parent().next().find('span.fieldValue').html(sFieldHtml);
                                        }
                                    });
                                }
                            }
                            bMatch = false;
                        }
                        break; // exit the for loop
                    }
                }
            });
            sd.mrgdContent = $('div.mergedContent').html();
            if($('div.trackChangesContent')) $('div.trackChangesContent').remove();
            if($('div.mergedContent')) $('div.mergedContent').remove();
            // plants need to be shown all expanded -> leave comment until plants comes on board
            // setTimeout( function() {$('span.excoll > a').click();}, 50);
        }
        $('div.page-content').html('');
        $('div.page-content').html(sd.mrgdContent);

        sd.checkEventsRegistration();

        return;
    }

    //****************************************************************************
    // Desc: 
    //****************************************************************************
    sd.checkEventsRegistration = function()
    {
        if(sc.debug) console.log(sc.getCounter() + 'sd.checkEventsRegistration');

        $('input#tcSwitch').off('change');
        $('input#tcSwitch').prop('checked', true);
        sc.positionDivSwith(sc.tcTop);
        sc.enableTcSwitchChange(); 
    }

    //****************************************************************************
    // Desc: 
    //****************************************************************************
    sd.toggleChanges = function()
    {
        if(sc.debug) console.log(sc.getCounter() + 'sd.toggleChanges');

        if($('input[type=checkbox]#tcSwitch').prop('checked'))
        {
            if(!sc.urlLaunch)
            {
                if(global.verbose) console.log('Loading editors track changes version');       
                if(sd.tcntContent != '')
                {
                    sd.displayChanges();
                }
                else
                {
                    sd.getChanges();
                }
            }
            else
            {
                sc.urlLaunch = false;
            }
        }
        else
        {
            if(global.verbose) console.log('Loading new version');

            sd.restorePageContent();
            sc.closeNavigationPane();
        }
    }

    //****************************************************************************
    // Desc: 
    //****************************************************************************
    sd.displayChanges = function()
    {
        if(sc.debug) console.log(sc.getCounter() + 'sd.displayChanges');

        sd.mergePageWithVersion();
        sd.genTrackArray();
        sc.setAccordion();
        sc.rehookLU();
        $('div#commodity-bg').css({'z-index':'0'});
        $('div#main').css({'position':'relative','z-index':'1'});
        $('div.commodity-menu').css({'position':'relative','z-index':'1'});

        if(ut.waitDialog) setTimeout(ut.closeWaitDialog(), 750);

        sc.showNavigationPane();
    }

    //****************************************************************************
    // Desc:
    //****************************************************************************
    sd.genTrackArray = function()
    {  
        if(sc.debug) console.log(sc.getCounter() + 'sd.genTrackArray');

        sc.track = new Array();
        if(sd.mrgdContent != '')
        {
            $('#main span[class*="ms-diff"]').each(function() 
            {
                if($(this).length != 0)
                {
                    if(global.verbose) console.log('-*-> diff tag: \n' + $(this).html());
                    sc.track[sc.track.length] = new sc._CO($(this));
                }
            });
            if(global.verbose) console.log('Total structured diff tags: ' + sc.track.length);   
        }
    }


    //****************************************************************************
    // Desc: 
    //****************************************************************************
    sd.getChanges = function()
    {
        if(sc.debug) console.log(sc.getCounter() + 'sd.getChanges');

        ut.showWaitDialog(
            'Working on it&nbsp;&nbsp;&nbsp;',
            'Loading editor\'s changes<br/> This won\'t take long ...', 
            125, 360
        );
        setTimeout(sd.loadTrackChanges(), 100);
    }

    //****************************************************************************
    // Desc: 
    //****************************************************************************
    sd.loadTrackChanges = function()
    {
        if(sc.debug) console.log(sc.getCounter() + 'sd.loadTrackChanges');

        var itemTitle = parseInt(sc.pageItemId, 10) + '-' + parseInt(sc.versionNumber, 10) 
                    + '-' + parseInt(sc.pageVersion, 10), sClean='';

        sd.tmpVersionNumber = ''; ;
        sd.tmpVersionNumber = sc.filterOutUnwantedChars($('div.VersionNumber').text());
        var arVers = sd.tmpVersionNumber.split('|');
        var folder = arVers[2];
        var sVersUrl = L_Menu_BaseUrl + '/siteassets/tc/'+folder+'/'+itemTitle+'.htm';
        if(global.verbose) console.log('Item URL to load: ' + sVersUrl);
        $('body').append('<div id="versionContent"></div>');
        $.ajaxSetup(
        {
            'beforeSend' : function(xhr) 
            {// xhr.overrideMimeType('text/html; charset=ISO-8859-1');
                xhr.overrideMimeType('text/html; charset=UTF-8');
            }
        });
        $('#versionContent').load(sVersUrl + (' #' + sd.commodTag),
        function()
        {
            sClean = $('#versionContent').html();
            sd.tcntContent = sClean.replace(/[\u200B-\u200D\uFEFF]/g, '')
                                .replace(/Â/g, '')
                                .replace(/â€‹/g, '')
                                .replace(/Ã«/,'ë')
                                .replace(/â¬9/g, '');
            $('#versionContent').remove();
            setTimeout(function()
            {
                sd.displayChanges();
            }, 200);
        });
    }

    //****************************************************************************
    // Desc: should occur when track changes are turned of again
    //****************************************************************************
    sd.restorePageContent = function()
    {
        if(sc.debug) console.log(sc.getCounter() + 'sd.restorePageContent');

        $('div.page-content').html('');
        $('div.page-content').html(sd.pageContent);
        sc.setAccordion();
        $('div#commodity-bg').css({'z-index':'0'});
        $('div#main').css({'position':'relative','z-index':'1'});
        $('div.commodity-menu').css({'position':'relative','z-index':'1'});
        $('input[type=checkbox]#tcSwitch').prop('checked', false);

        sc.enableTcSwitchChange();
    }

    //****************************************************************************
    /*E: DAIRY */
}
//****************************************************************************
//////////////////////////////////////////////////////////////////////////////
//****************************************************************************
{/*S: FISH */
    var sf = sf || {};

    sf.commodTag   = 'tcFish';
    sf.arV         = new Array();
    sf.mrgdContent = '', // Content containing track changes merged with original content
    sf.pageContent = '', // Original page published content 
    sf.tcntContent = '', // Loaded content from the Track Changes file in Site Assets
    sf.Fmap        = new Array();

    // Constructors
    sf._FM = function(psFieldType, psLabel, psMapLabel)
    {
        this.TYPE = psFieldType; // A, H1, L, TL : all UpperCase
        this.WLBL = psLabel;     // wiki fieldLabel
        this.MAPT = psMapLabel;  // span.fieldValue / div[aria-labelledby*="_ x x x _label"]
    }
    // Fields mapping for Fish
    sf.Fmap[ 0] = new sf._FM( 'A',  'PRE_Sections', '_PRE_Sections_label');
    sf.Fmap[ 1] = new sf._FM( 'A',  'PMA_PreconditionsMarketAccess', '_PMA_PreconditionsMarketAccess_label');
    sf.Fmap[ 2] = new sf._FM( 'A',  'PMA_EstablishmentRegistration', '_PMA_EstablishmentRegistration_label');
    sf.Fmap[ 3] = new sf._FM( 'A',  'PMA_OverseasListing', '_PMA_OverseasListing_label');
    sf.Fmap[ 4] = new sf._FM( 'A',  'PMA_ProhibitedProducts', '_PMA_ProhibitedProducts_label');
    sf.Fmap[ 5] = new sf._FM( 'A',  'PMA_FishProductsHumanConsumption', '_PMA_FishProductsHumanConsumption_label');
    sf.Fmap[ 6] = new sf._FM( 'A',  'PMA_FishProductsNotHumanConsumption', '_PMA_FishProductsNotHumanConsumption_label');
    sf.Fmap[ 7] = new sf._FM( 'A',  'PMA_GeneralInformation', '_PMA_GeneralInformation_label');
    sf.Fmap[ 8] = new sf._FM( 'A',  'PPHC_ProductionProductsHumanComsumption', '_PPHC_ProductionProductsHumanComsumption_label');
    sf.Fmap[ 9] = new sf._FM( 'A',  'PPHC_LiveSeafood', '_PPHC_LiveSeafood_label');
    sf.Fmap[10] = new sf._FM( 'A',  'PPHC_NonViableSeafood', '_PPHC_NonViableSeafood_label');
    sf.Fmap[11] = new sf._FM( 'A',  'PPHC_Crocodiles', '_PPHC_Crocodiles_label');
    sf.Fmap[12] = new sf._FM( 'A',  'PPNHC_ProductionProductsNotHumanConsumption', '_PPNHC_ProductionProductsNotHumanConsumption_label');
    sf.Fmap[13] = new sf._FM( 'A',  'PPNHC_TechnicalGradePharmaceuticalProducts', '_PPNHC_TechnicalGradePharmaceuticalProducts_label');
    sf.Fmap[14] = new sf._FM( 'A',  'PPNHC_AnimalFeed', '_PPNHC_AnimalFeed_label');
    sf.Fmap[15] = new sf._FM( 'A',  'PPNHC_RenderedProductsSkinsHides', '_PPNHC_RenderedProductsSkinsHides_label');
    sf.Fmap[16] = new sf._FM( 'A',  'PPNHC_Shells', '_PPNHC_Shells_label');
    sf.Fmap[17] = new sf._FM( 'A',  'OR_OperationalRequirements', '_OR_OperationalRequirements_label');
    sf.Fmap[18] = new sf._FM( 'A',  'OR_HarvestingProcessing', '_OR_HarvestingProcessing_label');
    sf.Fmap[19] = new sf._FM( 'A',  'OR_MicrobialResidueSampling', '_OR_MicrobialResidueSampling_label');
    sf.Fmap[20] = new sf._FM( 'A',  'OR_OperationalRequirementsAdditional', '_OR_OperationalRequirementsAdditional_label');
    sf.Fmap[21] = new sf._FM( 'A',  'DR_DocumentationRequirements', '_DR_DocumentationRequirements_label');
    sf.Fmap[22] = new sf._FM( 'A',  'DR_LifeSeafood', '_DR_LifeSeafood_label');
    sf.Fmap[23] = new sf._FM( 'A',  'DR_NonViableSeafood', '_DR_NonViableSeafood_label');
    sf.Fmap[24] = new sf._FM( 'A',  'DR_Crocodiles', '_DR_Crocodiles_label');
    sf.Fmap[25] = new sf._FM( 'A',  'DR_ManufacturingGradeProducts', '_DR_ManufacturingGradeProducts_label');
    sf.Fmap[26] = new sf._FM( 'A',  'DR_TechnicalGradePharmaceuticalProducts', '_DR_TechnicalGradePharmaceuticalProducts_label');
    sf.Fmap[27] = new sf._FM( 'A',  'DR_AnimalFeed', '_DR_AnimalFeed_label');
    sf.Fmap[28] = new sf._FM( 'A',  'DR_Consignments10KgTradeSamples', '_DR_Consignments10KgTradeSamples_label');
    sf.Fmap[29] = new sf._FM( 'A',  'DR_AdditionalCertificationLetter', '_DR_AdditionalCertificationLetter_label');
    sf.Fmap[30] = new sf._FM( 'A',  'IP_ImportProcedures', '_IP_ImportProcedures_label');
    sf.Fmap[31] = new sf._FM( 'A',  'IP_ImportPermit', '_IP_ImportPermit_label');
    sf.Fmap[32] = new sf._FM( 'A',  'IP_PortEntryInspectionTesting', '_IP_PortEntryInspectionTesting_label');
    sf.Fmap[33] = new sf._FM( 'A',  'PLSM_PackagingLabellingShippingMarks', '_PLSM_PackagingLabellingShippingMarks_label');
    sf.Fmap[34] = new sf._FM( 'A',  'PLSM_Packaging', '_PLSM_Packaging_label');
    sf.Fmap[35] = new sf._FM( 'A',  'PLSM_Labelling', '_PLSM_Labelling_label');
    sf.Fmap[36] = new sf._FM( 'A',  'PLSM_ShelfLife', '_PLSM_ShelfLife_label');
    sf.Fmap[37] = new sf._FM( 'A',  'PLSM_ShippingMarks', '_PLSM_ShippingMarks_label');
    sf.Fmap[38] = new sf._FM( 'A',  'SAFR_ShippingAirFreightRequirements', '_SAFR_ShippingAirFreightRequirements_label');
    sf.Fmap[39] = new sf._FM( 'A',  'SAFR_RefrigerationTransferLoadout', '_SAFR_RefrigerationTransferLoadout_label');
    sf.Fmap[40] = new sf._FM( 'A',  'ADA_AdditionalDocumentationAvailable', '_ADA_AdditionalDocumentationAvailable_label');
    sf.Fmap[41] = new sf._FM( 'A',  'DEF_Definitions', '_DEF_Definitions_label');
    sf.Fmap[42] = new sf._FM( 'A',  'H2_EdibleProducts', '_H2_EdibleProducts_label');
    sf.Fmap[43] = new sf._FM( 'A',  'H2_InedibleProducts', '_H2_InedibleProducts_label');
    sf.Fmap[44] = new sf._FM( 'A',  'OR_PremisesEquipment', '_OR_PremisesEquipment_label');
    sf.Fmap[45] = new sf._FM( 'A',  'PMA_PreconditionsMarketAccessV2', '_PMA_PreconditionsMarketAccessV2_label');
    sf.Fmap[46] = new sf._FM( 'A',  'PMA_EstablishmentRegistrationV2', '_PMA_EstablishmentRegistrationV2_label');
    sf.Fmap[47] = new sf._FM( 'A',  'PMA_OverseasListingV2', '_PMA_OverseasListingV2_label');
    sf.Fmap[48] = new sf._FM( 'A',  'PMA_ProhibitedProductsV2', '_PMA_ProhibitedProductsV2_label');
    sf.Fmap[49] = new sf._FM( 'A',  'IN_CrocodileSkinsHides', '_IN_CrocodileSkinsHides_label');
    sf.Fmap[50] = new sf._FM( 'A',  'IN_RenderedProducts', '_IN_RenderedProducts_label');

    //****************************************************************************
    // Desc: 
    //****************************************************************************
    sf.mergePageWithVersion = function()
    {
        if(sc.debug) console.log(sc.getCounter() + 'sf.mergePageWithVersion');

        var nCnt = 0;
        // Only on the first page load
        if( sf.mrgdContent == '' || sf.pageConent == '' )
        {
            $('body').append('<div class="mergedContent"></div>');
            $('body').append('<div class="trackChangesContent"></div>');

            sf.pageContent = $('div.page-content').html();

            $('div.mergedContent').html('');
            $('div.mergedContent').html(sf.pageContent);
            $('div.trackChangesContent').html('');
            $('div.trackChangesContent').html(sf.tcntContent);
            // search for matches in the fieldmapping array then, if found, swap content
            $('div.trackChangesContent').find('div.tcDiv').each(
            function()
            {
                if(global.verbose) console.log(++nCnt);
                var sFieldType = sWikiLabel = sFieldLabl = sFieldHtml = '', bMatch = false;

                for(var ni=0; ni<sf.Fmap.length; ni++)
                {
                    if( $(this).find('label.fieldLabel').text().replace(/\//g,'_') == sf.Fmap[ni].WLBL )
                    {
                        if(global.verbose) console.log(' --> Match: ' + sf.Fmap[ni].WLBL);
                        sFieldType = sf.Fmap[ni].TYPE;
                        sWikiLabel = sf.Fmap[ni].WLBL;
                        sFieldLabl = sf.Fmap[ni].MAPT;
                            $(this).find('label').remove();
                            $(this).find('br'   ).remove();
                        sFieldHtml = $(this).html();
                        if(global.verbose) 
                            console.log(    '  >Type: \n'        + sFieldType
                                        + '\n  >Wiki Label: \n'  + sWikiLabel
                                        + '\n  >Field Label: \n' + sFieldLabl
                                        + '\n  >Field Html: \n'  + sFieldHtml
                                        );
                        bMatch = true;
                        if(bMatch)
                        {
                            switch(sFieldType)
                            {
                                case 'A':
                                {
                                    $('div.mergedContent').find('div[aria-labelledby*="'+sFieldLabl+'"]').each(
                                    function()
                                    {
                                        $(this).html(sFieldHtml);
                                    });
                                    break;
                                }
                                case 'H1': // Special display: in a H1
                                {
                                    $('div.mergedContent > h1').eq(0).html(sFieldHtml);
                                    break;
                                }
                                case 'L':
                                {
                                    $('div.mergedContent').find('span.fieldLabel').each(
                                    function()
                                    {
                                        if($(this).text() == sFieldLabl)
                                        {
                                            $(this).next().html(sFieldHtml); 
                                        }
                                    });
                                    break;
                                }
                                case 'TL': // Special display: in a table
                                {
                                    $('div.mergedContent').find('span.fieldLabel').each(
                                    function()
                                    {
                                        if($(this).text().replace(/\//g,'_') == sFieldLabl)
                                        {
                                            $(this).parent().next().find('span.fieldValue').html(sFieldHtml);
                                        }
                                    });
                                }
                            }
                            bMatch = false;
                        }
                        break; // exit the for loop
                    }
                }
            });
            sf.mrgdContent = $('div.mergedContent').html();
            if($('div.trackChangesContent')) $('div.trackChangesContent').remove();
            if($('div.mergedContent')) $('div.mergedContent').remove();
        }
        $('div.page-content').html('');
        $('div.page-content').html(sf.mrgdContent);

        sf.checkEventsRegistration();

        return;
    }

    //****************************************************************************
    // Desc: 
    //****************************************************************************
    sf.checkEventsRegistration = function()
    {
        if(sc.debug) console.log(sc.getCounter() + 'sf.checkEventsRegistration');

        $('input#tcSwitch').off('change');
        $('input#tcSwitch').prop('checked', true);
        sc.positionDivSwith(sc.tcTop);
        sc.enableTcSwitchChange(); 
    }

    //****************************************************************************
    // Desc: 
    //****************************************************************************
    sf.toggleChanges = function()
    {
        if(sc.debug) console.log(sc.getCounter() + 'sf.toggleChanges');

        if($('input[type=checkbox]#tcSwitch').prop('checked'))
        {
            if(!sc.urlLaunch)
            {
                if(global.verbose) console.log('Loading editors track changes version');       
                if(sf.tcntContent != '')
                {
                    sf.displayChanges();
                }
                else
                {
                    sf.getChanges();
                }
            }
            else
            {
                sc.urlLaunch = false;
            }
        }
        else
        {
            if(global.verbose) console.log('Loading new version');

            sf.restorePageContent();
            sc.closeNavigationPane();
        }
    }

    //****************************************************************************
    // Desc: 
    //****************************************************************************
    sf.displayChanges = function()
    {
        if(sc.debug) console.log(sc.getCounter() + 'sf.displayChanges');

        sf.mergePageWithVersion();
        sf.genTrackArray();
        sc.setAccordion();
        sc.rehookLU();
        $('div#commodity-bg').css({'z-index':'0'});
        $('div#main').css({'position':'relative','z-index':'1'});
        $('div.commodity-menu').css({'position':'relative','z-index':'1'});

        if(ut.waitDialog) setTimeout(ut.closeWaitDialog(), 750);

        sc.showNavigationPane();
    }

    //****************************************************************************
    // Desc:
    //****************************************************************************
    sf.genTrackArray = function()
    { 
        if(sc.debug) console.log(sc.getCounter() + 'sf.genTrackArray');

        sc.track = new Array();
        if(sf.mrgdContent != '')
        {
            $('#main span[class*="ms-diff"]').each(function() 
            {
                if($(this).length != 0)
                {
                    if(global.verbose) console.log('-*-> diff tag: \n' + $(this).html());
                    sc.track[sc.track.length] = new sc._CO($(this));
                }
            });
            if(global.verbose) console.log('Total structured diff tags: ' + sc.track.length);   
        }
    }


    //****************************************************************************
    // Desc: 
    //****************************************************************************
    sf.getChanges = function()
    {
        if(sc.debug) console.log(sc.getCounter() + 'sf.getChanges');

        ut.showWaitDialog(
            'Working on it&nbsp;&nbsp;&nbsp;',
            'Loading editor\'s changes<br/> This won\'t take long ...', 
            125, 360
        );
        setTimeout(sf.loadTrackChanges(), 100);
    }

    //****************************************************************************
    // Desc: 
    //****************************************************************************
    sf.loadTrackChanges = function()
    {
        if(sc.debug) console.log(sc.getCounter() + 'sf.loadTrackChanges');

        var itemTitle = parseInt(sc.pageItemId, 10) + '-' + parseInt(sc.versionNumber, 10) 
                    + '-' + parseInt(sc.pageVersion, 10), sClean='';

        sf.tmpVersionNumber = ''; ;
        sf.tmpVersionNumber = sc.filterOutUnwantedChars($('div.VersionNumber').text());
        var arVers = sf.tmpVersionNumber.split('|');
        var folder = arVers[2];
        var sVersUrl = L_Menu_BaseUrl + '/siteassets/tc/'+folder+'/'+itemTitle+'.htm';
        if(global.verbose) console.log('Item URL to load: ' + sVersUrl);
        $('body').append('<div id="versionContent"></div>');
        $.ajaxSetup(
        {
            'beforeSend' : function(xhr) 
            {// xhr.overrideMimeType('text/html; charset=ISO-8859-1');
                xhr.overrideMimeType('text/html; charset=UTF-8');
            }
        });
        $('#versionContent').load(sVersUrl + (' #' + sf.commodTag),
        function()
        {
            sClean = $('#versionContent').html();
            sf.tcntContent = sClean.replace(/[\u200B-\u200D\uFEFF]/g, '')
                                .replace(/Â/g, '')
                                .replace(/â€‹/g, '')
                                .replace(/Ã«/,'ë')
                                .replace(/â¬9/g, '');
            $('#versionContent').remove();
            setTimeout(function()
            {
                sf.displayChanges();
            }, 200);
        });
    }

    //****************************************************************************
    // Desc: should occur when track changes are turned of again
    //****************************************************************************
    sf.restorePageContent = function()
    {
        if(sc.debug) console.log(sc.getCounter() + 'sf.restorePageContent');

        $('div.page-content').html('');
        $('div.page-content').html(sf.pageContent);
        sc.setAccordion();
        $('div#commodity-bg').css({'z-index':'0'});
        $('div#main').css({'position':'relative','z-index':'1'});
        $('div.commodity-menu').css({'position':'relative','z-index':'1'});
        $('input[type=checkbox]#tcSwitch').prop('checked', false);

        sc.enableTcSwitchChange();
    }

    //****************************************************************************
    /*E: FISH */
}
//****************************************************************************
//////////////////////////////////////////////////////////////////////////////
//****************************************************************************
{/*S: EGGS */
    var se = se || {};

    se.commodTag   = 'tcEggs';
    se.arV         = new Array();
    se.mrgdContent = '', // Content containing track changes merged with original content
    se.pageContent = '', // Original page published content 
    se.tcntContent = '', // Loaded content from the Track Changes file in Site Assets
    se.Fmap        = new Array();

    // Constructors
    se._FM = function(psFieldType, psLabel, psMapLabel)
    {
        this.TYPE = psFieldType; // A, H1, L, TL : all UpperCase
        this.WLBL = psLabel;     // wiki fieldLabel
        this.MAPT = psMapLabel;  // span.fieldValue / div[aria-labelledby*="_ x x x _label"]
    }

    // Fields mapping for eggs
    se.Fmap[ 0] = new se._FM( 'A',  'PRE_Sections', '_PRE_Sections_label');
    se.Fmap[ 1] = new se._FM( 'A',  'PMA_PreconditionsMarketAccess', '_PMA_PreconditionsMarketAccess_label');
    se.Fmap[ 2] = new se._FM( 'A',  'OR_OperationalRequirements', '_OR_OperationalRequirements_label');
    se.Fmap[ 3] = new se._FM( 'A',  'DR_DocumentationRequirements', '_DR_DocumentationRequirements_label');
    se.Fmap[ 4] = new se._FM( 'A',  'IP_ImportProcedures', '_IP_ImportProcedures_label');
    se.Fmap[ 5] = new se._FM( 'A',  'PLSM_PackagingLabellingShippingMarks', '_PLSM_PackagingLabellingShippingMarks_label');
    se.Fmap[ 6] = new se._FM( 'A',  'SAFR_ShippingAirFreightRequirements', '_SAFR_ShippingAirFreightRequirements_label');
    se.Fmap[ 7] = new se._FM( 'A',  'ADA_AdditionalDocumentationAvailable', '_ADA_AdditionalDocumentationAvailable_label');
    se.Fmap[ 8] = new se._FM( 'A',  'DEF_Definitions', '_DEF_Definitions_label');

    //****************************************************************************
    // Desc: 
    //****************************************************************************
    se.mergePageWithVersion = function()
    {
        if(sc.debug) console.log(sc.getCounter() + 'se.mergePageWithVersion');

        var nCnt = 0;
        // Only on the first page load
        if( se.mrgdContent == '' || se.pageConent == '' )
        {
            $('body').append('<div class="mergedContent"></div>');
            $('body').append('<div class="trackChangesContent"></div>');

            se.pageContent = $('div.page-content').html();

            $('div.mergedContent').html('');
            $('div.mergedContent').html(se.pageContent);
            $('div.trackChangesContent').html('');
            $('div.trackChangesContent').html(se.tcntContent);
            // search for matches in the fieldmapping array then, if found, swap content
            $('div.trackChangesContent').find('div.tcDiv').each(
            function()
            {
                if(global.verbose) console.log(++nCnt);
                var sFieldType = sWikiLabel = sFieldLabl = sFieldHtml = '', bMatch = false;

                for(var ni=0; ni<se.Fmap.length; ni++)
                {
                    if( $(this).find('label.fieldLabel').text().replace(/\//g,'_') == se.Fmap[ni].WLBL )
                    {
                        if(global.verbose) console.log(' --> Match: ' + se.Fmap[ni].WLBL);
                        sFieldType = se.Fmap[ni].TYPE;
                        sWikiLabel = se.Fmap[ni].WLBL;
                        sFieldLabl = se.Fmap[ni].MAPT;
                            $(this).find('label').remove();
                            $(this).find('br'   ).remove();
                        sFieldHtml = $(this).html();
                        if(global.verbose) 
                            console.log(    '  >Type: \n'        + sFieldType
                                        + '\n  >Wiki Label: \n'  + sWikiLabel
                                        + '\n  >Field Label: \n' + sFieldLabl
                                        + '\n  >Field Html: \n'  + sFieldHtml
                                        );
                        bMatch = true;
                        if(bMatch)
                        {
                            switch(sFieldType)
                            {
                                case 'A':
                                {
                                    $('div.mergedContent').find('div[aria-labelledby*="'+sFieldLabl+'"]').each(
                                    function()
                                    {
                                        $(this).html(sFieldHtml);
                                    });
                                    break;
                                }
                                case 'H1': // Special display: in a H1
                                {
                                    $('div.mergedContent > h1').eq(0).html(sFieldHtml);
                                    break;
                                }
                                case 'L':
                                {
                                    $('div.mergedContent').find('span.fieldLabel').each(
                                    function()
                                    {
                                        if($(this).text() == sFieldLabl)
                                        {
                                            $(this).next().html(sFieldHtml); 
                                        }
                                    });
                                    break;
                                }
                                case 'TL': // Special display: in a table
                                {
                                    $('div.mergedContent').find('span.fieldLabel').each(
                                    function()
                                    {
                                        if($(this).text().replace(/\//g,'_') == sFieldLabl)
                                        {
                                            $(this).parent().next().find('span.fieldValue').html(sFieldHtml);
                                        }
                                    });
                                }
                            }
                            bMatch = false;
                        }
                        break; // exit the for loop
                    }
                }
            });
            se.mrgdContent = $('div.mergedContent').html();
            if($('div.trackChangesContent')) $('div.trackChangesContent').remove();
            if($('div.mergedContent')) $('div.mergedContent').remove();
            // plants need to be shown all expanded -> leave comment until plants comes on board
            // setTimeout( function() {$('span.excoll > a').click();}, 50);
        }
        $('div.page-content').html('');
        $('div.page-content').html(se.mrgdContent);

        se.checkEventsRegistration();

        return;
    }

    //****************************************************************************
    // Desc: 
    //****************************************************************************
    se.checkEventsRegistration = function()
    {
        if(sc.debug) console.log(sc.getCounter() + 'se.checkEventsRegistration');

        $('input#tcSwitch').off('change');
        $('input#tcSwitch').prop('checked', true);
        sc.positionDivSwith(sc.tcTop);
        sc.enableTcSwitchChange(); 
    }

    //****************************************************************************
    // Desc: 
    //****************************************************************************
    se.toggleChanges = function()
    {
        if(sc.debug) console.log(sc.getCounter() + 'se.toggleChanges');

        if($('input[type=checkbox]#tcSwitch').prop('checked'))
        {
            if(!sc.urlLaunch)
            {
                if(global.verbose) console.log('Loading editors track changes version');       
                if(se.tcntContent != '')
                {
                    se.displayChanges();
                }
                else
                {
                    se.getChanges();
                }
            }
            else
            {
                sc.urlLaunch = false;
            }
        }
        else
        {
            if(global.verbose) console.log('Loading new version');

            se.restorePageContent();
            sc.closeNavigationPane();
        }
    }

    //****************************************************************************
    // Desc: 
    //****************************************************************************
    se.displayChanges = function()
    {
        if(sc.debug) console.log(sc.getCounter() + 'se.displayChanges');

        se.mergePageWithVersion();
        se.genTrackArray();
        sc.setAccordion();
        sc.rehookLU();
        $('div#commodity-bg').css({'z-index':'0'});
        $('div#main').css({'position':'relative','z-index':'1'});
        $('div.commodity-menu').css({'position':'relative','z-index':'1'});

        if(ut.waitDialog) setTimeout(ut.closeWaitDialog(), 750);

        sc.showNavigationPane();
    }

    //****************************************************************************
    // Desc:
    //****************************************************************************
    se.genTrackArray = function()
    { 
        if(sc.debug) console.log(sc.getCounter() + 'se.genTrackArray');

        sc.track = new Array();
        if(se.mrgdContent != '')
        {
            $('#main span[class*="ms-diff"]').each(function() 
            {
                if($(this).length != 0)
                {
                    if(global.verbose) console.log('-*-> diff tag: \n' + $(this).html());
                    sc.track[sc.track.length] = new sc._CO($(this));
                }
            });
            if(global.verbose) console.log('Total structured diff tags: ' + sc.track.length);   
        }
    }


    //****************************************************************************
    // Desc: 
    //****************************************************************************
    se.getChanges = function()
    {
        if(sc.debug) console.log(sc.getCounter() + 'se.getChanges');

        ut.showWaitDialog(
            'Working on it&nbsp;&nbsp;&nbsp;',
            'Loading editor\'s changes<br/> This won\'t take long ...', 
            125, 360
        );
        setTimeout(se.loadTrackChanges(), 100);
    }

    //****************************************************************************
    // Desc: 
    //****************************************************************************
    se.loadTrackChanges = function()
    {
        if(sc.debug) console.log(sc.getCounter() + 'se.loadTrackChanges');

        var itemTitle = parseInt(sc.pageItemId, 10) + '-' + parseInt(sc.versionNumber, 10) 
                    + '-' + parseInt(sc.pageVersion, 10), sClean='';

        se.tmpVersionNumber = ''; ;
        se.tmpVersionNumber = sc.filterOutUnwantedChars($('div.VersionNumber').text());
        var arVers = se.tmpVersionNumber.split('|');
        var folder = arVers[2];
        var sVersUrl = L_Menu_BaseUrl + '/siteassets/tc/'+folder+'/'+itemTitle+'.htm';
        if(global.verbose) console.log('Item URL to load: ' + sVersUrl);
        $('body').append('<div id="versionContent"></div>');
        $.ajaxSetup(
        {
            'beforeSend' : function(xhr) 
            {// xhr.overrideMimeType('text/html; charset=ISO-8859-1');
                xhr.overrideMimeType('text/html; charset=UTF-8');
            }
        });
        $('#versionContent').load(sVersUrl + (' #' + se.commodTag),
        function()
        {
            sClean = $('#versionContent').html();
            se.tcntContent = sClean.replace(/[\u200B-\u200D\uFEFF]/g, '')
                                .replace(/Â/g, '')
                                .replace(/â€‹/g, '')
                                .replace(/Ã«/,'ë')
                                .replace(/â¬9/g, '');
            $('#versionContent').remove();
            setTimeout(function()
            {
                se.displayChanges();
            }, 200);
        });
    }

    //****************************************************************************
    // Desc: should occur when track changes are turned of again
    //****************************************************************************
    se.restorePageContent = function()
    {
        if(sc.debug) console.log(sc.getCounter() + 'se.restorePageContent');

        $('div.page-content').html('');
        $('div.page-content').html(se.pageContent);
        sc.setAccordion();
        $('div#commodity-bg').css({'z-index':'0'});
        $('div#main').css({'position':'relative','z-index':'1'});
        $('div.commodity-menu').css({'position':'relative','z-index':'1'});
        $('input[type=checkbox]#tcSwitch').prop('checked', false);

        sc.enableTcSwitchChange();
    }

    //****************************************************************************
    /*E: EGGS */
}
//****************************************************************************
//////////////////////////////////////////////////////////////////////////////
//****************************************************************************
{/*S: NPG */
    var sn = sn || {};

    sn.commodTag   = 'tcNPG';
    sn.arV         = new Array();
    sn.mrgdContent = '', // Content containing track changes merged with original content
    sn.pageContent = '', // Original page published content 
    sn.tcntContent = '', // Loaded content from the Track Changes file in Site Assets
    sn.Fmap        = new Array();

    // Constructors
    sn._FM = function(psFieldType, psLabel, psMapLabel)
    {
        this.TYPE = psFieldType; // A, H1, L, TL : all UpperCase
        this.WLBL = psLabel;     // wiki fieldLabel
        this.MAPT = psMapLabel;  // span.fieldValue / div[aria-labelledby*="_ x x x _label"]
    }

    // Fields mapping for npg
    sn.Fmap[ 0] = new sn._FM( 'A', 'PRE_Sections', '_PRE_Sections_label');
    sn.Fmap[ 1] = new sn._FM( 'A', 'NPG_Category', '_NPG_Category_label');
    sn.Fmap[ 2] = new sn._FM( 'A', 'NPG_Product', '_NPG_Product_label');
    sn.Fmap[ 3] = new sn._FM( 'A', 'DR_GeneralConditions', '_DR_GeneralConditions_label');
    sn.Fmap[ 4] = new sn._FM( 'A', 'PMA_PreconditionsMarketAccess', '_PMA_PreconditionsMarketAccess_label');
    sn.Fmap[ 5] = new sn._FM( 'A', 'DR_DocumentationRequirements', '_DR_DocumentationRequirements_label');
    sn.Fmap[ 6] = new sn._FM( 'A', 'DR_OtherRequirements', '_DR_OtherRequirements_label');
    sn.Fmap[ 7] = new sn._FM( 'A', 'DR_Exemptions', '_DR_Exemptions_label');

    //****************************************************************************
    // Desc: 
    //****************************************************************************
    sn.mergePageWithVersion = function()
    {
        if(sc.debug) console.log(sc.getCounter() + 'sn.mergePageWithVersion');

        var nCnt = 0;
        // Only on the first page load
        if( sn.mrgdContent == '' || sn.pageConent == '' )
        {
            $('body').append('<div class="mergedContent"></div>');
            $('body').append('<div class="trackChangesContent"></div>');

            sn.pageContent = $('div.page-content').html();

            $('div.mergedContent').html('');
            $('div.mergedContent').html(sn.pageContent);
            $('div.trackChangesContent').html('');
            $('div.trackChangesContent').html(sn.tcntContent);
            // search for matches in the fieldmapping array then, if found, swap content
            $('div.trackChangesContent').find('div.tcDiv').each(
            function()
            {
                if(global.verbose) console.log(++nCnt);
                var sFieldType = sWikiLabel = sFieldLabl = sFieldHtml = '', bMatch = false;

                for(var ni=0; ni<sn.Fmap.length; ni++)
                {
                    if( $(this).find('label.fieldLabel').text().replace(/\//g,'_') == sn.Fmap[ni].WLBL )
                    {
                        if(global.verbose) console.log(' --> Match: ' + sn.Fmap[ni].WLBL);
                        sFieldType = sn.Fmap[ni].TYPE;
                        sWikiLabel = sn.Fmap[ni].WLBL;
                        sFieldLabl = sn.Fmap[ni].MAPT;
                            $(this).find('label').remove();
                            $(this).find('br'   ).remove();
                        sFieldHtml = $(this).html();
                        if(global.verbose) 
                            console.log(    '  >Type: \n'        + sFieldType
                                        + '\n  >Wiki Label: \n'  + sWikiLabel
                                        + '\n  >Field Label: \n' + sFieldLabl
                                        + '\n  >Field Html: \n'  + sFieldHtml
                                        );
                        bMatch = true;
                        if(bMatch)
                        {
                            switch(sFieldType)
                            {
                                case 'A':
                                {
                                    $('div.mergedContent').find('div[aria-labelledby*="'+sFieldLabl+'"]').each(
                                    function()
                                    {
                                        $(this).html(sFieldHtml);
                                    });
                                    break;
                                }
                                case 'H1': // Special display: in a H1
                                {
                                    $('div.mergedContent > h1').eq(0).html(sFieldHtml);
                                    break;
                                }
                                case 'L':
                                {
                                    $('div.mergedContent').find('span.fieldLabel').each(
                                    function()
                                    {
                                        if($(this).text() == sFieldLabl)
                                        {
                                            $(this).next().html(sFieldHtml); 
                                        }
                                    });
                                    break;
                                }
                                case 'TL': // Special display: in a table
                                {
                                    $('div.mergedContent').find('span.fieldLabel').each(
                                    function()
                                    {
                                        if($(this).text().replace(/\//g,'_') == sFieldLabl)
                                        {
                                            $(this).parent().next().find('span.fieldValue').html(sFieldHtml);
                                        }
                                    });
                                }
                            }
                            bMatch = false;
                        }
                        break; // exit the for loop
                    }
                }
            });
            sn.mrgdContent = $('div.mergedContent').html();
            if($('div.trackChangesContent')) $('div.trackChangesContent').remove();
            if($('div.mergedContent')) $('div.mergedContent').remove();
            // plants need to be shown all expanded -> leave comment until plants comes on board
            // setTimeout( function() {$('span.excoll > a').click();}, 50);
        }
        $('div.page-content').html('');
        $('div.page-content').html(sn.mrgdContent);

        sn.checkEventsRegistration();

        return;
    }

    //****************************************************************************
    // Desc: 
    //****************************************************************************
    sn.checkEventsRegistration = function()
    {
        if(sc.debug) console.log(sc.getCounter() + 'sn.checkEventsRegistration');

        $('input#tcSwitch').off('change');
        $('input#tcSwitch').prop('checked', true);
        sc.positionDivSwith(sc.tcTop);
        sc.enableTcSwitchChange(); 
    }

    //****************************************************************************
    // Desc: 
    //****************************************************************************
    sn.toggleChanges = function()
    {
        if(sc.debug) console.log(sc.getCounter() + 'sn.toggleChanges');

        if($('input[type=checkbox]#tcSwitch').prop('checked'))
        {
            if(!sc.urlLaunch)
            {
                if(global.verbose) console.log('Loading editors track changes version');       
                if(sn.tcntContent != '')
                {
                    sn.displayChanges();
                }
                else
                {
                    sn.getChanges();
                }
            }
            else
            {
                sc.urlLaunch = false;
            }
        }
        else
        {
            if(global.verbose) console.log('Loading new version');

            sn.restorePageContent();
            sc.closeNavigationPane();
        }
    }

    //****************************************************************************
    // Desc: 
    //****************************************************************************
    sn.displayChanges = function()
    {
        if(sc.debug) console.log(sc.getCounter() + 'sn.displayChanges');

        sn.mergePageWithVersion();
        sn.genTrackArray();
        sc.setAccordion();
        sc.rehookLU();
        $('div#commodity-bg').css({'z-index':'0'});
        $('div#main').css({'position':'relative','z-index':'1'});
        $('div.commodity-menu').css({'position':'relative','z-index':'1'});

        if(ut.waitDialog) setTimeout(ut.closeWaitDialog(), 750);

        sc.showNavigationPane();
    }

    //****************************************************************************
    // Desc:
    //****************************************************************************
    sn.genTrackArray = function()
    { 
        if(sc.debug) console.log(sc.getCounter() + 'sn.genTrackArray');

        sc.track = new Array();
        if(sn.mrgdContent != '')
        {
            $('#main span[class*="ms-diff"]').each(function() 
            {
                if($(this).length != 0)
                {
                    if(global.verbose) console.log('-*-> diff tag: \n' + $(this).html());
                    sc.track[sc.track.length] = new sc._CO($(this));
                }
            });
            if(global.verbose) console.log('Total structured diff tags: ' + sc.track.length);   
        }
    }


    //****************************************************************************
    // Desc: 
    //****************************************************************************
    sn.getChanges = function()
    {
        if(sc.debug) console.log(sc.getCounter() + 'sn.getChanges');

        ut.showWaitDialog(
            'Working on it&nbsp;&nbsp;&nbsp;',
            'Loading editor\'s changes<br/> This won\'t take long ...', 
            125, 360
        );
        setTimeout(sn.loadTrackChanges(), 100);
    }

    //****************************************************************************
    // Desc: 
    //****************************************************************************
    sn.loadTrackChanges = function()
    {
        if(sc.debug) console.log(sc.getCounter() + 'sn.loadTrackChanges');

        var itemTitle = parseInt(sc.pageItemId, 10) + '-' + parseInt(sc.versionNumber, 10) 
                    + '-' + parseInt(sc.pageVersion, 10), sClean='';

        sn.tmpVersionNumber = ''; ;
        sn.tmpVersionNumber = sc.filterOutUnwantedChars($('div.VersionNumber').text());
        var arVers = sn.tmpVersionNumber.split('|');
        var folder = arVers[2];
        var sVersUrl = L_Menu_BaseUrl + '/siteassets/tc/'+folder+'/'+itemTitle+'.htm';
        if(global.verbose) console.log('Item URL to load: ' + sVersUrl);
        $('body').append('<div id="versionContent"></div>');
        $.ajaxSetup(
        {
            'beforeSend' : function(xhr) 
            {// xhr.overrideMimeType('text/html; charset=ISO-8859-1');
                xhr.overrideMimeType('text/html; charset=UTF-8');
            }
        });
        $('#versionContent').load(sVersUrl + (' #' + sn.commodTag),
        function()
        {
            sClean = $('#versionContent').html();
            sn.tcntContent = sClean.replace(/[\u200B-\u200D\uFEFF]/g, '')
                                .replace(/Â/g, '')
                                .replace(/â€‹/g, '')
                                .replace(/Ã«/,'ë')
                                .replace(/â¬9/g, '');
            $('#versionContent').remove();
            setTimeout(function()
            {
                sn.displayChanges();
            }, 200);
        });
    }

    //****************************************************************************
    // Desc: should occur when track changes are turned of again
    //****************************************************************************
    sn.restorePageContent = function()
    {
        if(sc.debug) console.log(sc.getCounter() + 'sn.restorePageContent');

        $('div.page-content').html('');
        $('div.page-content').html(sn.pageContent);
        sc.setAccordion();
        $('div#commodity-bg').css({'z-index':'0'});
        $('div#main').css({'position':'relative','z-index':'1'});
        $('div.commodity-menu').css({'position':'relative','z-index':'1'});
        $('input[type=checkbox]#tcSwitch').prop('checked', false);

        sc.enableTcSwitchChange();
    }

//****************************************************************************
/*E: NPG */
}
//****************************************************************************
//////////////////////////////////////////////////////////////////////////////
//****************************************************************************
{/*S: ORGANICS */
var so = so || {};

so.commodTag   = 'tcOrganics';
so.arV         = new Array();
so.mrgdContent = '', // Content containing track changes merged with original content
so.pageContent = '', // Original page published content 
so.tcntContent = '', // Loaded content from the Track Changes file in Site Assets
so.Fmap        = new Array();

// Constructors
so._FM = function(psFieldType, psLabel, psMapLabel)
{
    this.TYPE = psFieldType; // A, H1, L, TL : all UpperCase
    this.WLBL = psLabel;     // wiki fieldLabel
    this.MAPT = psMapLabel;  // span.fieldValue / div[aria-labelledby*="_ x x x _label"]
}

// Fields mapping for organics
so.Fmap[ 0] = new so._FM( 'A',  'PRE_Sections', '_PRE_Sections_label');
so.Fmap[ 1] = new so._FM( 'A',  'ORG_GeneralRequirements', '_ORG_GeneralRequirements_label');
so.Fmap[ 2] = new so._FM( 'A',  'ORG_SpecificInformation', '_ORG_SpecificInformation_label');
so.Fmap[ 3] = new so._FM( 'A',  'ORG_InConversionProducts', '_ORG_InConversionProducts_label');

//****************************************************************************
// Desc: 
//****************************************************************************
so.mergePageWithVersion = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'so.mergePageWithVersion');

    var nCnt = 0;
    // Only on the first page load
    if( so.mrgdContent == '' || so.pageConent == '' )
    {
        $('body').append('<div class="mergedContent"></div>');
        $('body').append('<div class="trackChangesContent"></div>');

        so.pageContent = $('div.page-content').html();

        $('div.mergedContent').html('');
        $('div.mergedContent').html(so.pageContent);
        $('div.trackChangesContent').html('');
        $('div.trackChangesContent').html(so.tcntContent);
        // search for matches in the fieldmapping array then, if found, swap content
        $('div.trackChangesContent').find('div.tcDiv').each(
        function()
        {
            if(global.verbose) console.log(++nCnt);
            var sFieldType = sWikiLabel = sFieldLabl = sFieldHtml = '', bMatch = false;

            for(var ni=0; ni<so.Fmap.length; ni++)
            {
                if( $(this).find('label.fieldLabel').text().replace(/\//g,'_') == so.Fmap[ni].WLBL )
                {
                    if(global.verbose) console.log(' --> Match: ' + so.Fmap[ni].WLBL);
                    sFieldType = so.Fmap[ni].TYPE;
                    sWikiLabel = so.Fmap[ni].WLBL;
                    sFieldLabl = so.Fmap[ni].MAPT;
                        $(this).find('label').remove();
                        $(this).find('br'   ).remove();
                    sFieldHtml = $(this).html();
                    if(global.verbose) 
                        console.log(    '  >Type: \n'        + sFieldType
                                    + '\n  >Wiki Label: \n'  + sWikiLabel
                                    + '\n  >Field Label: \n' + sFieldLabl
                                    + '\n  >Field Html: \n'  + sFieldHtml
                                    );
                    bMatch = true;
                    if(bMatch)
                    {
                        switch(sFieldType)
                        {
                            case 'A':
                            {
                                $('div.mergedContent').find('div[aria-labelledby*="'+sFieldLabl+'"]').each(
                                function()
                                {
                                    $(this).html(sFieldHtml);
                                });
                                break;
                            }
                            case 'H1': // Special display: in a H1
                            {
                                $('div.mergedContent > h1').eq(0).html(sFieldHtml);
                                break;
                            }
                            case 'L':
                            {
                                $('div.mergedContent').find('span.fieldLabel').each(
                                function()
                                {
                                    if($(this).text() == sFieldLabl)
                                    {
                                        $(this).next().html(sFieldHtml); 
                                    }
                                });
                                break;
                            }
                            case 'TL': // Special display: in a table
                            {
                                $('div.mergedContent').find('span.fieldLabel').each(
                                function()
                                {
                                    if($(this).text().replace(/\//g,'_') == sFieldLabl)
                                    {
                                        $(this).parent().next().find('span.fieldValue').html(sFieldHtml);
                                    }
                                });
                            }
                        }
                        bMatch = false;
                    }
                    break; // exit the for loop
                }
            }
        });
        so.mrgdContent = $('div.mergedContent').html();
        if($('div.trackChangesContent')) $('div.trackChangesContent').remove();
        if($('div.mergedContent')) $('div.mergedContent').remove();
        // plants need to be shown all expanded -> leave comment until plants comes on board
        // setTimeout( function() {$('span.excoll > a').click();}, 50);
    }
    $('div.page-content').html('');
    $('div.page-content').html(so.mrgdContent);

    so.checkEventsRegistration();

    return;
}

//****************************************************************************
// Desc: 
//****************************************************************************
so.checkEventsRegistration = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'so.checkEventsRegistration');

    $('input#tcSwitch').off('change');
    $('input#tcSwitch').prop('checked', true);
    sc.positionDivSwith(sc.tcTop);
    sc.enableTcSwitchChange(); 
}

//****************************************************************************
// Desc: 
//****************************************************************************
so.toggleChanges = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'so.toggleChanges');

    if($('input[type=checkbox]#tcSwitch').prop('checked'))
    {
        if(!sc.urlLaunch)
        {
            if(global.verbose) console.log('Loading editors track changes version');       
            if(so.tcntContent != '')
            {
                so.displayChanges();
            }
            else
            {
                so.getChanges();
            }
        }
        else
        {
            sc.urlLaunch = false;
        }
    }
    else
    {
        if(global.verbose) console.log('Loading new version');

        so.restorePageContent();
        sc.closeNavigationPane();
    }
}

//****************************************************************************
// Desc: 
//****************************************************************************
so.displayChanges = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'so.displayChanges');

    so.mergePageWithVersion();
    so.genTrackArray();
    sc.setAccordion();
    sc.rehookLU();
    $('div#commodity-bg').css({'z-index':'0'});
    $('div#main').css({'position':'relative','z-index':'1'});
    $('div.commodity-menu').css({'position':'relative','z-index':'1'});

    if(ut.waitDialog) setTimeout(ut.closeWaitDialog(), 750);

    sc.showNavigationPane();
}

//****************************************************************************
// Desc:
//****************************************************************************
so.genTrackArray = function()
{ 
    if(sc.debug) console.log(sc.getCounter() + 'so.genTrackArray');

    sc.track = new Array();
    if(so.mrgdContent != '')
    {
        $('#main span[class*="ms-diff"]').each(function() 
        {
            if($(this).length != 0)
            {
                if(global.verbose) console.log('-*-> diff tag: \n' + $(this).html());
                sc.track[sc.track.length] = new sc._CO($(this));
            }
        });
        if(global.verbose) console.log('Total structured diff tags: ' + sc.track.length);   
    }
}


//****************************************************************************
// Desc: 
//****************************************************************************
so.getChanges = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'so.getChanges');

    ut.showWaitDialog(
        'Working on it&nbsp;&nbsp;&nbsp;',
        'Loading editor\'s changes<br/> This won\'t take long ...', 
        125, 360
    );
    setTimeout(so.loadTrackChanges(), 100);
}

//****************************************************************************
// Desc: 
//****************************************************************************
so.loadTrackChanges = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'so.loadTrackChanges');

    var itemTitle = parseInt(sc.pageItemId, 10) + '-' + parseInt(sc.versionNumber, 10) 
                + '-' + parseInt(sc.pageVersion, 10), sClean='';

    so.tmpVersionNumber = ''; ;
    so.tmpVersionNumber = sc.filterOutUnwantedChars($('div.VersionNumber').text());
    var arVers = so.tmpVersionNumber.split('|');
    var folder = arVers[2];
    var sVersUrl = L_Menu_BaseUrl + '/siteassets/tc/'+folder+'/'+itemTitle+'.htm';
    if(global.verbose) console.log('Item URL to load: ' + sVersUrl);
    $('body').append('<div id="versionContent"></div>');
    $.ajaxSetup(
    {
        'beforeSend' : function(xhr) 
        {// xhr.overrideMimeType('text/html; charset=ISO-8859-1');
            xhr.overrideMimeType('text/html; charset=UTF-8');
        }
    });
    $('#versionContent').load(sVersUrl + (' #' + so.commodTag),
    function()
    {
        sClean = $('#versionContent').html();
        so.tcntContent = sClean.replace(/[\u200B-\u200D\uFEFF]/g, '')
                            .replace(/Â/g, '')
                            .replace(/â€‹/g, '')
                            .replace(/Ã«/,'ë')
                            .replace(/â¬9/g, '');
        $('#versionContent').remove();
        setTimeout(function()
        {
            so.displayChanges();
        }, 200);
    });
}

//****************************************************************************
// Desc: should occur when track changes are turned of again
//****************************************************************************
so.restorePageContent = function()
{
    if(sc.debug) console.log(sc.getCounter() + 'so.restorePageContent');

    $('div.page-content').html('');
    $('div.page-content').html(so.pageContent);
    sc.setAccordion();
    $('div#commodity-bg').css({'z-index':'0'});
    $('div#main').css({'position':'relative','z-index':'1'});
    $('div.commodity-menu').css({'position':'relative','z-index':'1'});
    $('input[type=checkbox]#tcSwitch').prop('checked', false);

    sc.enableTcSwitchChange();
}

//****************************************************************************
/*E: ORGANICS */
}
//****************************************************************************
//////////////////////////////////////////////////////////////////////////////
//****************************************************************************

//****************************************************************************
// Desc: Script run starts here
//****************************************************************************
sc._Start = (function ()
{
    console.log('showchanges.min.js -> loaded');

    var sHref, bPublishingPage, styleSheet, jsUrlIE, tcUrl, ptUrl, hdUrl;

    sHref = window.location.href.toLowerCase();
    bPublishingPage = (sHref.indexOf('pages/') != -1)? true : false;
    if(bPublishingPage)
    {
        $(document).ready(function()
        {// Fix part of the jquery $.ajax encoding issue with files
            $.ajaxSetup(
            {
                'beforeSend' : function(xhr) 
                {
                    xhr.overrideMimeType('text/html; charset=UTF-8');
                }
            }); 
            $('#s4-workspace').prepend('<a id="scrollTop"></a>');
            if(global.IEVersion != -1)
            {
                jsUrlIE = sw.micorPath + 'js/smoothscroll.min.js';
                global.loadScript(jsUrlIE);
            }
            styleSheet = sw.micorPath + 
                         ((global.IEVersion == -1)?'css/showchanges.css':'css/showchangIE.css');
            global.loadCss(styleSheet);
            if($('#main[tc="enabled"]').length)
            {
                $('li#Ribbon\\.PublishTab-title').hide();
                $('div#DeltaPageStatusBar').hide();
            }

            if(sw.pathName.indexOf('plants/pages/') != -1)
            {
                sw.disablePlantsCCL();
            }
            
            if($('div#pageStatusBar').length)
            {
                if(sc.verbose) console.log('Hidden/Empty pageStatusBar path taken ...');
                sc.init('Published');
            }
            else 
            {
                if(sc.verbose) console.log('No pageStatusBar path taken ...');
                sc.init('No');
            }
        });
    }
    else
    {
        if(sc.verbose) console.log('This page is not a publishing page.');
    }
})();

//****************************************************************************